{"version":3,"file":"index.js","sources":["utils/index.ts"],"sourcesContent":["export const getToken = () => uni.getStorageSync('token')\n\nexport const parseTime = (time: number, cFormat: string) => {\n  const format = cFormat || '{y}-{m}-{d} {h}:{i}:{s}'\n  // 时间戳改为日期格式\n  let date: Date\n  if (typeof time === 'object') {\n    date = time\n  }\n  else {\n    date = new Date(parseInt(time))\n  }\n  const formatObj: any = {\n    y: date.getFullYear(),\n    m: date.getMonth() + 1,\n    d: date.getDate(),\n    h: date.getHours(),\n    i: date.getMinutes(),\n    s: date.getSeconds(),\n    a: date.getDay(),\n  }\n  const time_str = format.replace(/{(y|m|d|h|i|s|a)+}/g, (result, key) => {\n    let value = formatObj[key]\n    if (key === 'a')\n      return ['一', '二', '三', '四', '五', '六', '日'][value - 1]\n    if (result.length > 0 && value < 10)\n      value = `0${value}`\n    return value || 0\n  })\n  return time_str\n}\n\nexport function formatDate(cellValue) {\n  if (cellValue == null || cellValue == \"\") return \"\"\n  var date = new Date(cellValue)\n  var year = date.getFullYear()\n  var month = date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1\n  var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate()\n  var hours = date.getHours() < 10 ? '0' + date.getHours() : date.getHours()\n  var minutes = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes()\n  var seconds = date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds()\n  return year + '-' + month + '-' + day + ' ' + hours + ':' + minutes + ':' + seconds\n}\n\nexport function checkRole(roleKey: string) {\n  const token = uni.getStorageSync('token')\n  if (!token) return\n  const roles = uni.getStorageSync('user').roles\n  const roleKeys = roles.map(i => i.roleKey)\n\n  return !!roleKeys.includes(roleKey)\n}\n\nexport function randomRgbColor() {\n  var r = Math.floor(Math.random() * 256)\n  var g = Math.floor(Math.random() * 256)\n  var b = Math.floor(Math.random() * 256)\n  return `rgb(${r},${g},${b})`\n}\n\nconst PI = 3.1415926535897932384626\nconst a = 6378245.0 //卫星椭球坐标投影到平面地图坐标系的投影因子。\nconst ee = 0.00669342162296594323 //椭球的偏心率。\n\n\n//转化经度\nfunction transformlng(lng, lat) {\n  let ret = 300.0 + lng + 2.0 * lat + 0.1 * lng * lng + 0.1 * lng * lat + 0.1 * Math.sqrt(Math.abs(lng))\n  ret += ((20.0 * Math.sin(6.0 * lng * PI) + 20.0 * Math.sin(2.0 * lng * PI)) * 2.0) / 3.0\n  ret += ((20.0 * Math.sin(lng * PI) + 40.0 * Math.sin((lng / 3.0) * PI)) * 2.0) / 3.0\n  ret += ((150.0 * Math.sin((lng / 12.0) * PI) + 300.0 * Math.sin((lng / 30.0) * PI)) * 2.0) / 3.0\n  return ret\n}\n\n//转化纬度\nfunction transformlat(lng, lat) {\n  let ret = -100.0 + 2.0 * lng + 3.0 * lat + 0.2 * lat * lat + 0.1 * lng * lat + 0.2 * Math.sqrt(Math.abs(lng))\n  ret += ((20.0 * Math.sin(6.0 * lng * PI) + 20.0 * Math.sin(2.0 * lng * PI)) * 2.0) / 3.0\n  ret += ((20.0 * Math.sin(lat * PI) + 40.0 * Math.sin((lat / 3.0) * PI)) * 2.0) / 3.0\n  ret += ((160.0 * Math.sin((lat / 12.0) * PI) + 320 * Math.sin((lat * PI) / 30.0)) * 2.0) / 3.0\n  return ret\n}\n//判断时候在国内还是国外\nfunction out_of_china(lon, lat) {\n  if (lon < 72.004 || lon > 137.8347) {\n    return true\n  }\n  if (lat < 0.8293 || lat > 55.8271) {\n    return true\n  }\n  return false\n}\n//wgs84 to gcj02   地球坐标系 转 火星坐标系\nexport function wgs84togcj02(lng, lat) {\n  let dlat = transformlat(lng - 105.0, lat - 35.0)\n  let dlng = transformlng(lng - 105.0, lat - 35.0)\n  let radlat = (lat / 180.0) * PI\n  let magic = Math.sin(radlat)\n  magic = 1 - ee * magic * magic\n  let sqrtmagic = Math.sqrt(magic)\n  dlat =\n    (dlat * 180.0) /\n    (((a * (1 - ee)) / (magic * sqrtmagic)) * PI)\n  dlng =\n    (dlng * 180.0) / ((a / sqrtmagic) * Math.cos(radlat) * PI)\n  let mglat = lat + dlat\n  let mglng = lng + dlng\n\n  return [mglng, mglat]\n}\n\n//gcj02 to wgs84  火星坐标系 转 地球坐标系\nexport function gcj02towgs84(lng, lat) {\n  const originalLngSign = Math.sign(lng)\n  const originalLatSign = Math.sign(lat)\n  lat = Math.abs(lat)\n  lng = Math.abs(lng)\n  let dlat = transformlat(lng - 105.0, lat - 35.0)\n  let dlng = transformlng(lng - 105.0, lat - 35.0)\n  let radlat = lat / 180.0 * PI\n  let magic = Math.sin(radlat)\n  magic = 1 - ee * magic * magic\n  let sqrtmagic = Math.sqrt(magic)\n  dlat = (dlat * 180.0) / ((a * (1 - ee)) / (magic * sqrtmagic) * PI)\n  dlng = (dlng * 180.0) / (a / sqrtmagic * Math.cos(radlat) * PI)\n  let mglat = lat + dlat\n  let mglng = lng + dlng\n  let lngs = lng * 2 - mglng\n  let lats = lat * 2 - mglat\n  let finalLng = originalLngSign * lngs\n  let finalLat = originalLatSign * lats\n\n  return [finalLng, finalLat]\n}\n\nexport function formatDateTime(timestamp) {\n  let date = new Date(timestamp)\n  const year = date.getFullYear()\n  const month = String(date.getMonth() + 1).padStart(2, '0') // 月份从0开始，需加1并补零\n  const day = String(date.getDate()).padStart(2, '0')\n  const hours = String(date.getHours()).padStart(2, '0')\n  const minutes = String(date.getMinutes()).padStart(2, '0')\n  const seconds = String(date.getSeconds()).padStart(2, '0')\n  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\n}\n\nexport function getTodayTimestampRange() {\n  const now = new Date();\n  const start = new Date(now);\n  start.setHours(0,  0, 0, 0);\n  \n  const end = new Date(now);\n  end.setHours(23,  59, 59, 999);\n  \n  return [start.getTime(), end.getTime()]\n}\n\n/**\n* 计算目标日期是多少天前（或几天后）\n* @param {string|Date} targetDate - 目标日期（支持字符串如\"2025-07-01\"或Date对象）\n* @returns {string} 友好提示（如\"9天前\"、\"今天\"、\"1天后\"）\n*/\nexport function getDaysAgo(targetDate) {\n  // 1. 获取当前日期的日起点（00:00:00）\n  const now = new Date()\n  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate())\n\n  // 2. 解析目标日期（处理字符串或Date对象）\n  const target = new Date(targetDate)\n  if (isNaN(target.getTime())) { // 验证日期有效性\n    return \"无效的日期格式，请输入如'2025-07-01'的ISO格式\"\n  }\n  const targetDay = new Date(target.getFullYear(), target.getMonth(), target.getDate())  // 目标日期的日起点\n\n  // 3. 计算时间差（毫秒）并转换为天数\n  const timeDiff = today.getTime() - targetDay.getTime()\n  const daysDiff = Math.floor(timeDiff / 86400000) // 86400000 = 24×60×60×1000\n\n  // 4. 返回友好结果\n  if (daysDiff > 0) {\n    return `${daysDiff}天前`\n  } else if (daysDiff === 0) {\n    return \"今天\"\n  } else {\n    return `${Math.abs(daysDiff)} 天后` // 处理未来日期\n  }\n}\n\n/**\n * 计算距离\n * @param lat1 纬度1\n * @param lng1 经度1\n * @param lat2 纬度2\n * @param lng2 经度2\n * @returns 距离（单位：米）\n */\nfunction rad(d) {\n  return d * Math.PI / 180.0\n}\n\n\n// 根据经纬度计算距离，参数分别为第一点的纬度，经度；第二点的纬度，经度\nexport function getDistance(lat1, lng1, lat2, lng2) {\n\n  var radLat1 = rad(lat1)\n  var radLat2 = rad(lat2)\n  var a = radLat1 - radLat2\n  var b = rad(lng1) - rad(lng2)\n  var s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a / 2), 2) +\n    Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(b / 2), 2)))\n  s = s * 6378.137 // EARTH_RADIUS;\n  // 输出为公里\n  s = Math.round(s * 10000) / 10000\n\n  var distance = s\n  var distance_str = \"\"\n\n  if (parseInt(distance) >= 1) {\n    // distance_str = distance.toFixed(1) + \"km\";\n    distance_str = distance.toFixed(2) + \"km\"\n  } else {\n    // distance_str = distance * 1000 + \"m\";\n    distance_str = (distance * 1000).toFixed(2) + \"m\"\n  }\n\n  //s=s.toFixed(4);\n\n  // console.info('距离是', s);\n  // console.info('距离是', distance_str);\n  // return s;\n\n  //小小修改，这里返回对象\n  let objData = {\n    distance: distance,\n    distance_str: distance_str\n  }\n  return objData.distance_str\n}\n"],"names":["uni","a"],"mappings":"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"}