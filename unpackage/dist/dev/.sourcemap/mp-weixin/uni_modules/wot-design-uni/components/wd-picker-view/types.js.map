{"version":3,"file":"types.js","sources":["uni_modules/wot-design-uni/components/wd-picker-view/types.ts"],"sourcesContent":["import type { ComponentPublicInstance, ExtractPropTypes, PropType, Ref } from 'vue'\nimport { baseProps, makeArrayProp, makeBooleanProp, makeNumberProp, makeStringProp } from '../common/props'\nimport { getType, isArray, isObj } from '../common/util'\n\nexport type ColumnItem = {\n  [key: string]: any\n  value?: string | number | boolean\n  label?: string\n  disabled?: boolean\n}\n\nexport type PickerViewColumnChange = (\n  pickerView: PickerViewInstance,\n  selects: Record<string, any> | Record<string, any>[],\n  index: number,\n  reslove: () => void\n) => void\n\nexport const pickerViewProps = {\n  ...baseProps,\n  /**\n   * 加载状态\n   */\n  loading: makeBooleanProp(false),\n  /**\n   * 加载的颜色，只能使用十六进制的色值写法，且不能使用缩写\n   */\n  loadingColor: makeStringProp('#4D80F0'),\n  /**\n   * picker内部滚筒高\n   */\n  columnsHeight: makeNumberProp(217),\n  /**\n   * 选项对象中，value对应的 key\n   */\n  valueKey: makeStringProp('value'),\n  /**\n   * 选项对象中，展示的文本对应的 key\n   */\n  labelKey: makeStringProp('label'),\n  /**\n   * 是否在手指松开时立即触发picker-view的 change 事件。若不开启则会在滚动动画结束后触发 change 事件，1.2.25版本起提供，仅微信小程序和支付宝小程序支持。\n   */\n  immediateChange: makeBooleanProp(false),\n  /**\n   * 选中项，如果为多列选择器，则其类型应为数组\n   */\n  modelValue: {\n    type: [String, Number, Boolean, Array<number>, Array<string>, Array<boolean>] as PropType<\n      string | number | boolean | Array<number> | Array<string> | Array<boolean>\n    >,\n    default: '',\n    required: true\n  },\n  /**\n   * 选择器数据，可以为字符串数组，也可以为对象数组，如果为二维数组，则为多列选择器\n   */\n  columns: makeArrayProp<string | number | ColumnItem | Array<number> | Array<string> | Array<ColumnItem>>(),\n  /**\n   * 接收 pickerView 实例、选中项、当前修改列的下标、resolve 作为入参，根据选中项和列下标进行判断，通过 pickerView 实例暴露出来的 setColumnData 方法修改其他列的数据源。\n   */\n  columnChange: Function as PropType<PickerViewColumnChange>\n}\n\nexport type PickerViewExpose = {\n  getSelects: () => Record<string, any> | Record<string, any>[]\n  getValues: () => string | string[]\n  setColumnData: (columnIndex: number, data: Array<string | number | ColumnItem | Array<string | number | ColumnItem>>, rowIndex?: number) => void\n  getColumnsData: () => Record<string, string>[][]\n  getColumnData: (columnIndex: number) => Record<string, string>[]\n  getColumnIndex: (columnIndex: number) => number\n  getLabels: () => string[]\n  getSelectedIndex: () => number[]\n  resetColumns: (columns: (string | number | string[] | number[] | ColumnItem | ColumnItem[])[]) => void\n}\n\nexport type PickerViewProps = ExtractPropTypes<typeof pickerViewProps>\n\nexport type PickerViewInstance = ComponentPublicInstance<PickerViewProps, PickerViewExpose>\n\n/**\n * 格式化传入的列数据\n * 列数据统一格式化为二维数组\n * @param array 列数据\n * @param valueKey\n * @param labelKey\n * @returns\n */\nexport function formatArray(\n  array: Array<string | number | ColumnItem | Array<string | number | ColumnItem>>,\n  valueKey: string,\n  labelKey: string\n): ColumnItem[][] {\n  let tempArray: Array<string | number | ColumnItem | Array<string | number | ColumnItem>> = isArray(array) ? array : [array]\n  // 判断数组第一层的数据类型，如果存在多种类型，则抛错\n  const firstLevelTypeList = new Set(array.map(getType))\n  /**\n   * 存在三种类型的合法数据\n   * 1.数组是一维元素，所有元素都是原始值\n   * 2.数组是一维元素，所有元素都是object\n   * 3.数组是二维元素，二维元素可以是任意内容\n   */\n  if (firstLevelTypeList.size !== 1 && firstLevelTypeList.has('object')) {\n    // 原始值和引用类型不用混用\n    throw Error('The columns are correct')\n  }\n  /**\n   * 简单处理，如果数组第一项不是数组则认为它是一个一维数组\n   * 所以需要把一维的转成二维，这样方便统一处理\n   */\n  if (!isArray(array[0])) {\n    tempArray = [tempArray as Array<string | number | ColumnItem>]\n  }\n  // 转化为二维数组后需要将每一项包装成ColumnItem\n  const result: Array<Array<ColumnItem>> = (tempArray as Array<Array<string | number | ColumnItem>>).map((col) => {\n    return col.map((row) => {\n      // 非对象类型直接将值作为label和value\n      if (!isObj(row)) {\n        return {\n          [valueKey]: row,\n          [labelKey]: row\n        }\n      }\n      /**\n       * 针对已经是object的，修补成{valueKey,labelKey}\n       * 如果没有labelKey，用valueKey代替\n       * 如果没有valueKey，用labelKey代替\n       * valueKey,labelKey都没有，直接抛错\n       */\n      // eslint-disable-next-line no-prototype-builtins\n      if (!row.hasOwnProperty(valueKey) && !row.hasOwnProperty(labelKey)) {\n        // eslint-disable-next-line prettier/prettier\n      throw Error('Can\\'t find valueKey and labelKey in columns')\n      }\n      // eslint-disable-next-line no-prototype-builtins\n      if (!row.hasOwnProperty(labelKey)) {\n        row[labelKey] = row[valueKey]\n      }\n      // eslint-disable-next-line no-prototype-builtins\n      if (!row.hasOwnProperty(valueKey)) {\n        row[valueKey] = row[labelKey]\n      }\n      return row\n    })\n  })\n\n  return result\n}\n"],"names":["baseProps","makeBooleanProp","makeStringProp","makeNumberProp","makeArrayProp","isArray","getType","isObj"],"mappings":";;;AAkBO,MAAM,kBAAkB;AAAA,EAC7B,GAAGA,iDAAA;AAAA;AAAA;AAAA;AAAA,EAIH,SAASC,iEAAgB,KAAK;AAAA;AAAA;AAAA;AAAA,EAI9B,cAAcC,gEAAe,SAAS;AAAA;AAAA;AAAA;AAAA,EAItC,eAAeC,gEAAe,GAAG;AAAA;AAAA;AAAA;AAAA,EAIjC,UAAUD,gEAAe,OAAO;AAAA;AAAA;AAAA;AAAA,EAIhC,UAAUA,gEAAe,OAAO;AAAA;AAAA;AAAA;AAAA,EAIhC,iBAAiBD,iEAAgB,KAAK;AAAA;AAAA;AAAA;AAAA,EAItC,YAAY;AAAA,IACV,MAAM,CAAC,QAAQ,QAAQ,SAAS,OAAe,OAAe,KAAc;AAAA,IAG5E,SAAS;AAAA,IACT,UAAU;AAAA,EACZ;AAAA;AAAA;AAAA;AAAA,EAIA,SAASG,iDAAAA,cAAgG;AAAA;AAAA;AAAA;AAAA,EAIzG,cAAc;AAChB;AA0BgB,SAAA,YACd,OACA,UACA,UACgB;AAChB,MAAI,YAAuFC,gDAAAA,QAAQ,KAAK,IAAI,QAAQ,CAAC,KAAK;AAE1H,QAAM,qBAAqB,IAAI,IAAI,MAAM,IAAIC,gDAAO,OAAA,CAAC;AAOrD,MAAI,mBAAmB,SAAS,KAAK,mBAAmB,IAAI,QAAQ,GAAG;AAErE,UAAM,MAAM,yBAAyB;AAAA,EACvC;AAKA,MAAI,CAACD,gDAAA,QAAQ,MAAM,CAAC,CAAC,GAAG;AACtB,gBAAY,CAAC,SAAgD;AAAA,EAC/D;AAEA,QAAM,SAAoC,UAAyD,IAAI,CAAC,QAAQ;AACvG,WAAA,IAAI,IAAI,CAAC,QAAQ;AAElB,UAAA,CAACE,gDAAAA,MAAM,GAAG,GAAG;AACR,eAAA;AAAA,UACL,CAAC,QAAQ,GAAG;AAAA,UACZ,CAAC,QAAQ,GAAG;AAAA,QAAA;AAAA,MAEhB;AAQI,UAAA,CAAC,IAAI,eAAe,QAAQ,KAAK,CAAC,IAAI,eAAe,QAAQ,GAAG;AAEpE,cAAM,MAAM,6CAA8C;AAAA,MAC1D;AAEA,UAAI,CAAC,IAAI,eAAe,QAAQ,GAAG;AAC7B,YAAA,QAAQ,IAAI,IAAI,QAAQ;AAAA,MAC9B;AAEA,UAAI,CAAC,IAAI,eAAe,QAAQ,GAAG;AAC7B,YAAA,QAAQ,IAAI,IAAI,QAAQ;AAAA,MAC9B;AACO,aAAA;AAAA,IAAA,CACR;AAAA,EAAA,CACF;AAEM,SAAA;AACT;;;"}