{"version":3,"file":"types.js","sources":["uni_modules/wot-design-uni/components/wd-message-box/types.ts"],"sourcesContent":["/*\n * @Author: weisheng\n * @Date: 2024-04-08 22:34:01\n * @LastEditTime: 2024-12-05 13:26:50\n * @LastEditors: weisheng\n * @Description:\n * @FilePath: \\wot-design-uni\\src\\uni_modules\\wot-design-uni\\components\\wd-message-box\\types.ts\n * 记得注释\n */\nimport { baseProps, makeStringProp } from '../common/props'\nimport type { ButtonProps } from '../wd-button/types'\nimport { type InputSize, type InputType } from '../wd-input/types'\n\nexport type MessageType = 'alert' | 'confirm' | 'prompt'\n\nexport type MessageBeforeConfirmOption = {\n  resolve: (isPass: boolean) => void\n}\n\nexport type MessageOptions = {\n  /**\n   * 标题\n   */\n  title?: string\n  /**\n   * 是否展示取消按钮\n   */\n  showCancelButton?: boolean\n  /**\n   * 是否支持点击蒙层进行关闭，点击蒙层回调传入的action为'modal'\n   */\n  closeOnClickModal?: boolean\n  /**\n   * 确定按钮文案\n   */\n  confirmButtonText?: string\n  /**\n   * 取消按钮文案\n   */\n  cancelButtonText?: string\n  /**\n   * 消息文案\n   */\n  msg?: string\n  /**\n   * 弹框类型\n   */\n  type?: MessageType\n  /**\n   * 当type为prompt时，输入框类型\n   */\n  inputType?: InputType\n  /**\n   * 设置输入框大小，可选值：large\n   */\n  inputSize?: InputSize\n  /**\n   * 当type为prompt时，输入框初始值\n   */\n  inputValue?: string | number\n  /**\n   * 当type为prompt时，输入框placeholder\n   */\n  inputPlaceholder?: string\n  /**\n   * 当type为prompt时，输入框正则校验，点击确定按钮时进行校验\n   */\n  inputPattern?: RegExp\n  /**\n   * 当type为prompt时，输入框校验函数，点击确定按钮时进行校验\n   */\n  inputValidate?: InputValidate\n  /**\n   * 当type为prompt时，输入框检验不通过时的错误提示文案\n   */\n  inputError?: string\n  /**\n   * 是否展示错误信息\n   */\n  showErr?: boolean\n  /**\n   * 弹窗层级\n   */\n  zIndex?: number\n  /**\n   * 弹层内容懒渲染，触发展示时才渲染内容\n   */\n  lazyRender?: boolean\n  /**\n   * 确认前钩子\n   */\n  beforeConfirm?: (options: MessageBeforeConfirmOption) => void\n  /**\n   * 取消按钮Props\n   */\n  cancelButtonProps?: Partial<ButtonProps>\n  /**\n   * 确认按钮Props\n   */\n  confirmButtonProps?: Partial<ButtonProps>\n}\n\nexport type MessageOptionsWithCallBack = MessageOptions & {\n  show?: boolean\n  success?: (res: MessageResult) => void\n  fail?: (res: MessageResult) => void\n}\n\nexport type ActionType = 'confirm' | 'cancel' | 'modal'\n\nexport type InputValidate = (inputValue: string | number) => boolean\n\nexport interface MessageResult {\n  action: ActionType\n  value?: string | number\n}\n\nexport interface Message {\n  // 打开Message\n  show(toastOptions: MessageOptions | string): Promise<MessageResult>\n  // 打开Alert 弹框\n  alert(toastOptions: MessageOptions | string): Promise<MessageResult>\n  // 打开Confirm 弹框\n  confirm(toastOptions: MessageOptions | string): Promise<MessageResult>\n  // 打开Prompt 弹框\n  prompt(toastOptions: MessageOptions | string): Promise<MessageResult>\n  // 关闭Message\n  close(): void\n}\n\nexport const messageBoxProps = {\n  ...baseProps,\n  /**\n   * 指定唯一标识\n   */\n  selector: makeStringProp('')\n}\n"],"names":["baseProps","makeStringProp"],"mappings":";;AAkIO,MAAM,kBAAkB;AAAA,EAC7B,GAAGA,iDAAA;AAAA;AAAA;AAAA;AAAA,EAIH,UAAUC,gEAAe,EAAE;AAC7B;;"}