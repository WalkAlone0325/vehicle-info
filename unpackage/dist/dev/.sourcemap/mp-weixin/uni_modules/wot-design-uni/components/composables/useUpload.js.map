{"version":3,"file":"useUpload.js","sources":["uni_modules/wot-design-uni/components/composables/useUpload.ts"],"sourcesContent":["import { isArray, isDef, isFunction } from '../common/util'\nimport type { ChooseFile, ChooseFileOption, UploadFileItem, UploadMethod, UploadStatusType } from '../wd-upload/types'\n\nexport const UPLOAD_STATUS: Record<string, UploadStatusType> = {\n  PENDING: 'pending',\n  LOADING: 'loading',\n  SUCCESS: 'success',\n  FAIL: 'fail'\n}\n\nexport interface UseUploadReturn {\n  // 开始上传文件\n  startUpload: (file: UploadFileItem, options: UseUploadOptions) => UniApp.UploadTask | void | Promise<void>\n  // 中断上传\n  abort: (task?: UniApp.UploadTask) => void\n  // 上传状态常量\n  UPLOAD_STATUS: Record<string, UploadStatusType>\n  // 选择文件\n  chooseFile: (options: ChooseFileOption) => Promise<ChooseFile[]>\n}\n\nexport interface UseUploadOptions {\n  // 上传地址\n  action: string\n  // 请求头\n  header?: Record<string, any>\n  // 文件对应的 key\n  name?: string\n  // 其它表单数据\n  formData?: Record<string, any>\n  // 文件类型 仅支付宝支持且在支付宝平台必填\n  fileType?: 'image' | 'video' | 'audio'\n  // 成功状态码\n  statusCode?: number\n  // 文件状态的key\n  statusKey?: string\n  // 自定义上传方法\n  uploadMethod?: UploadMethod\n  // 上传成功回调\n  onSuccess?: (res: UniApp.UploadFileSuccessCallbackResult, file: UploadFileItem, formData: Record<string, any>) => void\n  // 上传失败回调\n  onError?: (res: UniApp.GeneralCallbackResult, file: UploadFileItem, formData: Record<string, any>) => void\n  // 上传进度回调\n  onProgress?: (res: UniApp.OnProgressUpdateResult, file: UploadFileItem) => void\n  // 是否自动中断之前的上传任务\n  abortPrevious?: boolean\n  // 根据文件拓展名过滤(H5支持全部类型过滤,微信小程序支持all和file时过滤,其余平台不支持)\n  extension?: string[]\n}\n\nexport function useUpload(): UseUploadReturn {\n  let currentTask: UniApp.UploadTask | null = null\n\n  // 中断上传\n  const abort = (task?: UniApp.UploadTask) => {\n    if (task) {\n      task.abort()\n    } else if (currentTask) {\n      currentTask.abort()\n      currentTask = null\n    }\n  }\n\n  /**\n   * 默认上传方法\n   */\n  const defaultUpload: UploadMethod = (file, formData, options) => {\n    // 如果配置了自动中断,则中断之前的上传任务\n    if (options.abortPrevious) {\n      abort()\n    }\n\n    const uploadTask = uni.uploadFile({\n      url: options.action,\n      header: options.header,\n      name: options.name,\n      fileName: options.name,\n      fileType: options.fileType,\n      formData,\n      filePath: file.url,\n      success(res) {\n        if (res.statusCode === options.statusCode) {\n          // 上传成功\n          options.onSuccess(res, file, formData)\n        } else {\n          // 上传失败\n          options.onError({ ...res, errMsg: res.errMsg || '' }, file, formData)\n        }\n      },\n      fail(err) {\n        // 上传失败\n        options.onError(err, file, formData)\n      }\n    })\n\n    currentTask = uploadTask\n\n    // 获取当前文件加载的百分比\n    uploadTask.onProgressUpdate((res) => {\n      options.onProgress(res, file)\n    })\n\n    // 返回上传任务实例,让外部可以控制上传过程\n    return uploadTask\n  }\n\n  /**\n   * 开始上传文件\n   */\n  const startUpload = (file: UploadFileItem, options: UseUploadOptions) => {\n    const {\n      uploadMethod,\n      formData = {},\n      action,\n      name = 'file',\n      header = {},\n      fileType = 'image',\n      statusCode = 200,\n      statusKey = 'status',\n      abortPrevious = false\n    } = options\n\n    // 设置上传中状态\n    file[statusKey] = UPLOAD_STATUS.LOADING\n\n    const uploadOptions = {\n      action,\n      header,\n      name,\n      fileName: name,\n      fileType,\n      statusCode,\n      abortPrevious,\n      onSuccess: (res: UniApp.UploadFileSuccessCallbackResult, file: UploadFileItem, formData: Record<string, any>) => {\n        // 更新文件状态\n        file[statusKey] = UPLOAD_STATUS.SUCCESS\n        currentTask = null\n        options.onSuccess?.(res, file, formData)\n      },\n      onError: (error: UniApp.GeneralCallbackResult, file: UploadFileItem, formData: Record<string, any>) => {\n        // 更新文件状态和错误信息\n        file[statusKey] = UPLOAD_STATUS.FAIL\n        file.error = error.errMsg\n        currentTask = null\n        options.onError?.(error, file, formData)\n      },\n      onProgress: (res: UniApp.OnProgressUpdateResult, file: UploadFileItem) => {\n        // 更新上传进度\n        file.percent = res.progress\n        options.onProgress?.(res, file)\n      }\n    }\n\n    // 返回上传任务实例,支持外部获取uploadTask进行操作\n    if (isFunction(uploadMethod)) {\n      return uploadMethod(file, formData, uploadOptions)\n    } else {\n      return defaultUpload(file, formData, uploadOptions)\n    }\n  }\n\n  /**\n   * 格式化图片信息\n   */\n  function formatImage(res: UniApp.ChooseImageSuccessCallbackResult): ChooseFile[] {\n    // #ifdef MP-DINGTALK\n    // 钉钉文件在files中\n    res.tempFiles = isDef((res as any).files) ? (res as any).files : res.tempFiles\n    // #endif\n    if (isArray(res.tempFiles)) {\n      return res.tempFiles.map((item: any) => ({\n        path: item.path || '',\n        name: item.name || '',\n        size: item.size,\n        type: 'image',\n        thumb: item.path || ''\n      }))\n    }\n    return [\n      {\n        path: (res.tempFiles as any).path || '',\n        name: (res.tempFiles as any).name || '',\n        size: (res.tempFiles as any).size,\n        type: 'image',\n        thumb: (res.tempFiles as any).path || ''\n      }\n    ]\n  }\n\n  /**\n   * 格式化视频信息\n   */\n  function formatVideo(res: UniApp.ChooseVideoSuccess): ChooseFile[] {\n    return [\n      {\n        path: res.tempFilePath || (res as any).filePath || '',\n        name: res.name || '',\n        size: res.size,\n        type: 'video',\n        thumb: (res as any).thumbTempFilePath || '',\n        duration: res.duration\n      }\n    ]\n  }\n\n  /**\n   * 格式化媒体信息\n   */\n  function formatMedia(res: UniApp.ChooseMediaSuccessCallbackResult): ChooseFile[] {\n    return res.tempFiles.map((item) => ({\n      type: item.fileType,\n      path: item.tempFilePath,\n      thumb: item.fileType === 'video' ? item.thumbTempFilePath : item.tempFilePath,\n      size: item.size,\n      duration: item.duration\n    }))\n  }\n\n  /**\n   * 选择文件\n   */\n  function chooseFile({\n    multiple,\n    sizeType,\n    sourceType,\n    maxCount,\n    accept,\n    compressed,\n    maxDuration,\n    camera,\n    extension\n  }: ChooseFileOption): Promise<ChooseFile[]> {\n    return new Promise((resolve, reject) => {\n      switch (accept) {\n        case 'image':\n          uni.chooseImage({\n            count: multiple ? Math.min(maxCount || 9, 9) : 1, // 默认9,最大9\n            sizeType,\n            sourceType,\n            // #ifdef H5\n            extension,\n            // #endif\n            success: (res) => resolve(formatImage(res)),\n            fail: reject\n          })\n          break\n        case 'video':\n          uni.chooseVideo({\n            sourceType,\n            compressed,\n            maxDuration,\n            camera,\n            // #ifdef H5\n            extension,\n            // #endif\n            success: (res) => resolve(formatVideo(res)),\n            fail: reject\n          })\n          break\n        // #ifdef MP-WEIXIN\n        case 'media':\n          uni.chooseMedia({\n            count: multiple ? Math.min(maxCount || 9, 9) : 1, // 默认9,最大9\n            sourceType,\n            sizeType,\n            camera,\n            maxDuration,\n            success: (res) => resolve(formatMedia(res)),\n            fail: reject\n          })\n          break\n        case 'file':\n          uni.chooseMessageFile({\n            count: multiple ? Math.min(maxCount || 100, 100) : 1, // 默认100,最大100\n            type: accept,\n            extension,\n            success: (res) => resolve(res.tempFiles),\n            fail: reject\n          })\n          break\n        // #endif\n        case 'all':\n          // #ifdef H5\n          uni.chooseFile({\n            count: multiple ? Math.min(maxCount || 100, 100) : 1, // 默认100,最大100\n            type: accept,\n            extension,\n            success: (res) => resolve(res.tempFiles as ChooseFile[]),\n            fail: reject\n          })\n          // #endif\n          // #ifdef MP-WEIXIN\n          uni.chooseMessageFile({\n            count: multiple ? Math.min(maxCount || 100, 100) : 1, // 默认100,最大100\n            type: accept,\n            extension,\n            success: (res) => resolve(res.tempFiles),\n            fail: reject\n          })\n          // #endif\n\n          break\n        default:\n          // 默认选择图片\n          uni.chooseImage({\n            count: multiple ? Math.min(maxCount || 9, 9) : 1, // 默认9,最大9\n            sizeType,\n            sourceType,\n            // #ifdef H5\n            extension,\n            // #endif\n            success: (res) => resolve(formatImage(res)),\n            fail: reject\n          })\n          break\n      }\n    })\n  }\n\n  return {\n    startUpload,\n    abort,\n    UPLOAD_STATUS,\n    chooseFile\n  }\n}\n"],"names":["uni","file","formData","isFunction","isArray"],"mappings":"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"}