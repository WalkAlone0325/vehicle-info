{"version":3,"file":"rsa.js","sources":["uni_modules/jsencrypt/lib/lib/jsbn/rsa.js"],"sourcesContent":["// Depends on jsbn.js and rng.js\n// Version 1.1: support utf-8 encoding in pkcs1pad2\n// convert a (hex) string to a bignum object\nimport { BigInteger, nbi, parseBigInt } from \"./jsbn\";\nimport { SecureRandom } from \"./rng\";\n// function linebrk(s,n) {\n//   var ret = \"\";\n//   var i = 0;\n//   while(i + n < s.length) {\n//     ret += s.substring(i,i+n) + \"\\n\";\n//     i += n;\n//   }\n//   return ret + s.substring(i,s.length);\n// }\n// function byte2Hex(b) {\n//   if(b < 0x10)\n//     return \"0\" + b.toString(16);\n//   else\n//     return b.toString(16);\n// }\nfunction pkcs1pad1(s, n) {\n    if (n < s.length + 22) {\n        console.error(\"Message too long for RSA\");\n        return null;\n    }\n    var len = n - s.length - 6;\n    var filler = \"\";\n    for (var f = 0; f < len; f += 2) {\n        filler += \"ff\";\n    }\n    var m = \"0001\" + filler + \"00\" + s;\n    return parseBigInt(m, 16);\n}\n// PKCS#1 (type 2, random) pad input string s to n bytes, and return a bigint\nfunction pkcs1pad2(s, n) {\n    if (n < s.length + 11) { // TODO: fix for utf-8\n        console.error(\"Message too long for RSA\");\n        return null;\n    }\n    var ba = [];\n    var i = s.length - 1;\n    while (i >= 0 && n > 0) {\n        var c = s.charCodeAt(i--);\n        if (c < 128) { // encode using utf-8\n            ba[--n] = c;\n        }\n        else if ((c > 127) && (c < 2048)) {\n            ba[--n] = (c & 63) | 128;\n            ba[--n] = (c >> 6) | 192;\n        }\n        else {\n            ba[--n] = (c & 63) | 128;\n            ba[--n] = ((c >> 6) & 63) | 128;\n            ba[--n] = (c >> 12) | 224;\n        }\n    }\n    ba[--n] = 0;\n    var rng = new SecureRandom();\n    var x = [];\n    while (n > 2) { // random non-zero pad\n        x[0] = 0;\n        while (x[0] == 0) {\n            rng.nextBytes(x);\n        }\n        ba[--n] = x[0];\n    }\n    ba[--n] = 2;\n    ba[--n] = 0;\n    return new BigInteger(ba);\n}\n// \"empty\" RSA key constructor\nvar RSAKey = /** @class */ (function () {\n    function RSAKey() {\n        this.n = null;\n        this.e = 0;\n        this.d = null;\n        this.p = null;\n        this.q = null;\n        this.dmp1 = null;\n        this.dmq1 = null;\n        this.coeff = null;\n    }\n    //#region PROTECTED\n    // protected\n    // RSAKey.prototype.doPublic = RSADoPublic;\n    // Perform raw public operation on \"x\": return x^e (mod n)\n    RSAKey.prototype.doPublic = function (x) {\n        return x.modPowInt(this.e, this.n);\n    };\n    // RSAKey.prototype.doPrivate = RSADoPrivate;\n    // Perform raw private operation on \"x\": return x^d (mod n)\n    RSAKey.prototype.doPrivate = function (x) {\n        if (this.p == null || this.q == null) {\n            return x.modPow(this.d, this.n);\n        }\n        // TODO: re-calculate any missing CRT params\n        var xp = x.mod(this.p).modPow(this.dmp1, this.p);\n        var xq = x.mod(this.q).modPow(this.dmq1, this.q);\n        while (xp.compareTo(xq) < 0) {\n            xp = xp.add(this.p);\n        }\n        return xp.subtract(xq).multiply(this.coeff).mod(this.p).multiply(this.q).add(xq);\n    };\n    //#endregion PROTECTED\n    //#region PUBLIC\n    // RSAKey.prototype.setPublic = RSASetPublic;\n    // Set the public key fields N and e from hex strings\n    RSAKey.prototype.setPublic = function (N, E) {\n        if (N != null && E != null && N.length > 0 && E.length > 0) {\n            this.n = parseBigInt(N, 16);\n            this.e = parseInt(E, 16);\n        }\n        else {\n            console.error(\"Invalid RSA public key\");\n        }\n    };\n    // RSAKey.prototype.encrypt = RSAEncrypt;\n    // Return the PKCS#1 RSA encryption of \"text\" as an even-length hex string\n    RSAKey.prototype.encrypt = function (text) {\n        var maxLength = (this.n.bitLength() + 7) >> 3;\n        var m = pkcs1pad2(text, maxLength);\n        if (m == null) {\n            return null;\n        }\n        var c = this.doPublic(m);\n        if (c == null) {\n            return null;\n        }\n        var h = c.toString(16);\n        var length = h.length;\n        // fix zero before result\n        for (var i = 0; i < maxLength * 2 - length; i++) {\n            h = \"0\" + h;\n        }\n        return h;\n    };\n    // RSAKey.prototype.setPrivate = RSASetPrivate;\n    // Set the private key fields N, e, and d from hex strings\n    RSAKey.prototype.setPrivate = function (N, E, D) {\n        if (N != null && E != null && N.length > 0 && E.length > 0) {\n            this.n = parseBigInt(N, 16);\n            this.e = parseInt(E, 16);\n            this.d = parseBigInt(D, 16);\n        }\n        else {\n            console.error(\"Invalid RSA private key\");\n        }\n    };\n    // RSAKey.prototype.setPrivateEx = RSASetPrivateEx;\n    // Set the private key fields N, e, d and CRT params from hex strings\n    RSAKey.prototype.setPrivateEx = function (N, E, D, P, Q, DP, DQ, C) {\n        if (N != null && E != null && N.length > 0 && E.length > 0) {\n            this.n = parseBigInt(N, 16);\n            this.e = parseInt(E, 16);\n            this.d = parseBigInt(D, 16);\n            this.p = parseBigInt(P, 16);\n            this.q = parseBigInt(Q, 16);\n            this.dmp1 = parseBigInt(DP, 16);\n            this.dmq1 = parseBigInt(DQ, 16);\n            this.coeff = parseBigInt(C, 16);\n        }\n        else {\n            console.error(\"Invalid RSA private key\");\n        }\n    };\n    // RSAKey.prototype.generate = RSAGenerate;\n    // Generate a new random private key B bits long, using public expt E\n    RSAKey.prototype.generate = function (B, E) {\n        var rng = new SecureRandom();\n        var qs = B >> 1;\n        this.e = parseInt(E, 16);\n        var ee = new BigInteger(E, 16);\n        for (;;) {\n            for (;;) {\n                this.p = new BigInteger(B - qs, 1, rng);\n                if (this.p.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) == 0 && this.p.isProbablePrime(10)) {\n                    break;\n                }\n            }\n            for (;;) {\n                this.q = new BigInteger(qs, 1, rng);\n                if (this.q.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) == 0 && this.q.isProbablePrime(10)) {\n                    break;\n                }\n            }\n            if (this.p.compareTo(this.q) <= 0) {\n                var t = this.p;\n                this.p = this.q;\n                this.q = t;\n            }\n            var p1 = this.p.subtract(BigInteger.ONE);\n            var q1 = this.q.subtract(BigInteger.ONE);\n            var phi = p1.multiply(q1);\n            if (phi.gcd(ee).compareTo(BigInteger.ONE) == 0) {\n                this.n = this.p.multiply(this.q);\n                this.d = ee.modInverse(phi);\n                this.dmp1 = this.d.mod(p1);\n                this.dmq1 = this.d.mod(q1);\n                this.coeff = this.q.modInverse(this.p);\n                break;\n            }\n        }\n    };\n    // RSAKey.prototype.decrypt = RSADecrypt;\n    // Return the PKCS#1 RSA decryption of \"ctext\".\n    // \"ctext\" is an even-length hex string and the output is a plain string.\n    RSAKey.prototype.decrypt = function (ctext) {\n        var c = parseBigInt(ctext, 16);\n        var m = this.doPrivate(c);\n        if (m == null) {\n            return null;\n        }\n        return pkcs1unpad2(m, (this.n.bitLength() + 7) >> 3);\n    };\n    // Generate a new random private key B bits long, using public expt E\n    RSAKey.prototype.generateAsync = function (B, E, callback) {\n        var rng = new SecureRandom();\n        var qs = B >> 1;\n        this.e = parseInt(E, 16);\n        var ee = new BigInteger(E, 16);\n        var rsa = this;\n        // These functions have non-descript names because they were originally for(;;) loops.\n        // I don't know about cryptography to give them better names than loop1-4.\n        var loop1 = function () {\n            var loop4 = function () {\n                if (rsa.p.compareTo(rsa.q) <= 0) {\n                    var t = rsa.p;\n                    rsa.p = rsa.q;\n                    rsa.q = t;\n                }\n                var p1 = rsa.p.subtract(BigInteger.ONE);\n                var q1 = rsa.q.subtract(BigInteger.ONE);\n                var phi = p1.multiply(q1);\n                if (phi.gcd(ee).compareTo(BigInteger.ONE) == 0) {\n                    rsa.n = rsa.p.multiply(rsa.q);\n                    rsa.d = ee.modInverse(phi);\n                    rsa.dmp1 = rsa.d.mod(p1);\n                    rsa.dmq1 = rsa.d.mod(q1);\n                    rsa.coeff = rsa.q.modInverse(rsa.p);\n                    setTimeout(function () { callback(); }, 0); // escape\n                }\n                else {\n                    setTimeout(loop1, 0);\n                }\n            };\n            var loop3 = function () {\n                rsa.q = nbi();\n                rsa.q.fromNumberAsync(qs, 1, rng, function () {\n                    rsa.q.subtract(BigInteger.ONE).gcda(ee, function (r) {\n                        if (r.compareTo(BigInteger.ONE) == 0 && rsa.q.isProbablePrime(10)) {\n                            setTimeout(loop4, 0);\n                        }\n                        else {\n                            setTimeout(loop3, 0);\n                        }\n                    });\n                });\n            };\n            var loop2 = function () {\n                rsa.p = nbi();\n                rsa.p.fromNumberAsync(B - qs, 1, rng, function () {\n                    rsa.p.subtract(BigInteger.ONE).gcda(ee, function (r) {\n                        if (r.compareTo(BigInteger.ONE) == 0 && rsa.p.isProbablePrime(10)) {\n                            setTimeout(loop3, 0);\n                        }\n                        else {\n                            setTimeout(loop2, 0);\n                        }\n                    });\n                });\n            };\n            setTimeout(loop2, 0);\n        };\n        setTimeout(loop1, 0);\n    };\n    RSAKey.prototype.sign = function (text, digestMethod, digestName) {\n        var header = getDigestHeader(digestName);\n        var digest = header + digestMethod(text).toString();\n        var m = pkcs1pad1(digest, this.n.bitLength() / 4);\n        if (m == null) {\n            return null;\n        }\n        var c = this.doPrivate(m);\n        if (c == null) {\n            return null;\n        }\n        var h = c.toString(16);\n        if ((h.length & 1) == 0) {\n            return h;\n        }\n        else {\n            return \"0\" + h;\n        }\n    };\n    RSAKey.prototype.verify = function (text, signature, digestMethod) {\n        var c = parseBigInt(signature, 16);\n        var m = this.doPublic(c);\n        if (m == null) {\n            return null;\n        }\n        var unpadded = m.toString(16).replace(/^1f+00/, \"\");\n        var digest = removeDigestHeader(unpadded);\n        return digest == digestMethod(text).toString();\n    };\n    return RSAKey;\n}());\nexport { RSAKey };\n// Undo PKCS#1 (type 2, random) padding and, if valid, return the plaintext\nfunction pkcs1unpad2(d, n) {\n    var b = d.toByteArray();\n    var i = 0;\n    while (i < b.length && b[i] == 0) {\n        ++i;\n    }\n    if (b.length - i != n - 1 || b[i] != 2) {\n        return null;\n    }\n    ++i;\n    while (b[i] != 0) {\n        if (++i >= b.length) {\n            return null;\n        }\n    }\n    var ret = \"\";\n    while (++i < b.length) {\n        var c = b[i] & 255;\n        if (c < 128) { // utf-8 decode\n            ret += String.fromCharCode(c);\n        }\n        else if ((c > 191) && (c < 224)) {\n            ret += String.fromCharCode(((c & 31) << 6) | (b[i + 1] & 63));\n            ++i;\n        }\n        else {\n            ret += String.fromCharCode(((c & 15) << 12) | ((b[i + 1] & 63) << 6) | (b[i + 2] & 63));\n            i += 2;\n        }\n    }\n    return ret;\n}\n// https://tools.ietf.org/html/rfc3447#page-43\nvar DIGEST_HEADERS = {\n    md2: \"3020300c06082a864886f70d020205000410\",\n    md5: \"3020300c06082a864886f70d020505000410\",\n    sha1: \"3021300906052b0e03021a05000414\",\n    sha224: \"302d300d06096086480165030402040500041c\",\n    sha256: \"3031300d060960864801650304020105000420\",\n    sha384: \"3041300d060960864801650304020205000430\",\n    sha512: \"3051300d060960864801650304020305000440\",\n    ripemd160: \"3021300906052b2403020105000414\"\n};\nfunction getDigestHeader(name) {\n    return DIGEST_HEADERS[name] || \"\";\n}\nfunction removeDigestHeader(str) {\n    for (var name_1 in DIGEST_HEADERS) {\n        if (DIGEST_HEADERS.hasOwnProperty(name_1)) {\n            var header = DIGEST_HEADERS[name_1];\n            var len = header.length;\n            if (str.substr(0, len) == header) {\n                return str.substr(len);\n            }\n        }\n    }\n    return str;\n}\n// Return the PKCS#1 RSA encryption of \"text\" as a Base64-encoded string\n// function RSAEncryptB64(text) {\n//  var h = this.encrypt(text);\n//  if(h) return hex2b64(h); else return null;\n// }\n// public\n// RSAKey.prototype.encrypt_b64 = RSAEncryptB64;\n"],"names":["uni","parseBigInt","SecureRandom","BigInteger","RSAKey","nbi"],"mappings":"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"}