{"version":3,"file":"jsbn.js","sources":["uni_modules/jsencrypt/lib/lib/jsbn/jsbn.js"],"sourcesContent":["// Copyright (c) 2005  Tom Wu\n// All Rights Reserved.\n// See \"LICENSE\" for details.\n// Basic JavaScript BN library - subset useful for RSA encryption.\nimport { cbit, int2char, lbit, op_and, op_andnot, op_or, op_xor } from \"./util\";\n// Bits per digit\nvar dbits;\n// JavaScript engine analysis\nvar canary = 0xdeadbeefcafe;\nvar j_lm = ((canary & 0xffffff) == 0xefcafe);\n//#region\nvar lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\nvar lplim = (1 << 26) / lowprimes[lowprimes.length - 1];\n//#endregion\n// (public) Constructor\nvar BigInteger = /** @class */ (function () {\n    function BigInteger(a, b, c) {\n        if (a != null) {\n            if (\"number\" == typeof a) {\n                this.fromNumber(a, b, c);\n            }\n            else if (b == null && \"string\" != typeof a) {\n                this.fromString(a, 256);\n            }\n            else {\n                this.fromString(a, b);\n            }\n        }\n    }\n    //#region PUBLIC\n    // BigInteger.prototype.toString = bnToString;\n    // (public) return string representation in given radix\n    BigInteger.prototype.toString = function (b) {\n        if (this.s < 0) {\n            return \"-\" + this.negate().toString(b);\n        }\n        var k;\n        if (b == 16) {\n            k = 4;\n        }\n        else if (b == 8) {\n            k = 3;\n        }\n        else if (b == 2) {\n            k = 1;\n        }\n        else if (b == 32) {\n            k = 5;\n        }\n        else if (b == 4) {\n            k = 2;\n        }\n        else {\n            return this.toRadix(b);\n        }\n        var km = (1 << k) - 1;\n        var d;\n        var m = false;\n        var r = \"\";\n        var i = this.t;\n        var p = this.DB - (i * this.DB) % k;\n        if (i-- > 0) {\n            if (p < this.DB && (d = this[i] >> p) > 0) {\n                m = true;\n                r = int2char(d);\n            }\n            while (i >= 0) {\n                if (p < k) {\n                    d = (this[i] & ((1 << p) - 1)) << (k - p);\n                    d |= this[--i] >> (p += this.DB - k);\n                }\n                else {\n                    d = (this[i] >> (p -= k)) & km;\n                    if (p <= 0) {\n                        p += this.DB;\n                        --i;\n                    }\n                }\n                if (d > 0) {\n                    m = true;\n                }\n                if (m) {\n                    r += int2char(d);\n                }\n            }\n        }\n        return m ? r : \"0\";\n    };\n    // BigInteger.prototype.negate = bnNegate;\n    // (public) -this\n    BigInteger.prototype.negate = function () {\n        var r = nbi();\n        BigInteger.ZERO.subTo(this, r);\n        return r;\n    };\n    // BigInteger.prototype.abs = bnAbs;\n    // (public) |this|\n    BigInteger.prototype.abs = function () {\n        return (this.s < 0) ? this.negate() : this;\n    };\n    // BigInteger.prototype.compareTo = bnCompareTo;\n    // (public) return + if this > a, - if this < a, 0 if equal\n    BigInteger.prototype.compareTo = function (a) {\n        var r = this.s - a.s;\n        if (r != 0) {\n            return r;\n        }\n        var i = this.t;\n        r = i - a.t;\n        if (r != 0) {\n            return (this.s < 0) ? -r : r;\n        }\n        while (--i >= 0) {\n            if ((r = this[i] - a[i]) != 0) {\n                return r;\n            }\n        }\n        return 0;\n    };\n    // BigInteger.prototype.bitLength = bnBitLength;\n    // (public) return the number of bits in \"this\"\n    BigInteger.prototype.bitLength = function () {\n        if (this.t <= 0) {\n            return 0;\n        }\n        return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));\n    };\n    // BigInteger.prototype.mod = bnMod;\n    // (public) this mod a\n    BigInteger.prototype.mod = function (a) {\n        var r = nbi();\n        this.abs().divRemTo(a, null, r);\n        if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) {\n            a.subTo(r, r);\n        }\n        return r;\n    };\n    // BigInteger.prototype.modPowInt = bnModPowInt;\n    // (public) this^e % m, 0 <= e < 2^32\n    BigInteger.prototype.modPowInt = function (e, m) {\n        var z;\n        if (e < 256 || m.isEven()) {\n            z = new Classic(m);\n        }\n        else {\n            z = new Montgomery(m);\n        }\n        return this.exp(e, z);\n    };\n    // BigInteger.prototype.clone = bnClone;\n    // (public)\n    BigInteger.prototype.clone = function () {\n        var r = nbi();\n        this.copyTo(r);\n        return r;\n    };\n    // BigInteger.prototype.intValue = bnIntValue;\n    // (public) return value as integer\n    BigInteger.prototype.intValue = function () {\n        if (this.s < 0) {\n            if (this.t == 1) {\n                return this[0] - this.DV;\n            }\n            else if (this.t == 0) {\n                return -1;\n            }\n        }\n        else if (this.t == 1) {\n            return this[0];\n        }\n        else if (this.t == 0) {\n            return 0;\n        }\n        // assumes 16 < DB < 32\n        return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0];\n    };\n    // BigInteger.prototype.byteValue = bnByteValue;\n    // (public) return value as byte\n    BigInteger.prototype.byteValue = function () {\n        return (this.t == 0) ? this.s : (this[0] << 24) >> 24;\n    };\n    // BigInteger.prototype.shortValue = bnShortValue;\n    // (public) return value as short (assumes DB>=16)\n    BigInteger.prototype.shortValue = function () {\n        return (this.t == 0) ? this.s : (this[0] << 16) >> 16;\n    };\n    // BigInteger.prototype.signum = bnSigNum;\n    // (public) 0 if this == 0, 1 if this > 0\n    BigInteger.prototype.signum = function () {\n        if (this.s < 0) {\n            return -1;\n        }\n        else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) {\n            return 0;\n        }\n        else {\n            return 1;\n        }\n    };\n    // BigInteger.prototype.toByteArray = bnToByteArray;\n    // (public) convert to bigendian byte array\n    BigInteger.prototype.toByteArray = function () {\n        var i = this.t;\n        var r = [];\n        r[0] = this.s;\n        var p = this.DB - (i * this.DB) % 8;\n        var d;\n        var k = 0;\n        if (i-- > 0) {\n            if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p) {\n                r[k++] = d | (this.s << (this.DB - p));\n            }\n            while (i >= 0) {\n                if (p < 8) {\n                    d = (this[i] & ((1 << p) - 1)) << (8 - p);\n                    d |= this[--i] >> (p += this.DB - 8);\n                }\n                else {\n                    d = (this[i] >> (p -= 8)) & 0xff;\n                    if (p <= 0) {\n                        p += this.DB;\n                        --i;\n                    }\n                }\n                if ((d & 0x80) != 0) {\n                    d |= -256;\n                }\n                if (k == 0 && (this.s & 0x80) != (d & 0x80)) {\n                    ++k;\n                }\n                if (k > 0 || d != this.s) {\n                    r[k++] = d;\n                }\n            }\n        }\n        return r;\n    };\n    // BigInteger.prototype.equals = bnEquals;\n    BigInteger.prototype.equals = function (a) {\n        return (this.compareTo(a) == 0);\n    };\n    // BigInteger.prototype.min = bnMin;\n    BigInteger.prototype.min = function (a) {\n        return (this.compareTo(a) < 0) ? this : a;\n    };\n    // BigInteger.prototype.max = bnMax;\n    BigInteger.prototype.max = function (a) {\n        return (this.compareTo(a) > 0) ? this : a;\n    };\n    // BigInteger.prototype.and = bnAnd;\n    BigInteger.prototype.and = function (a) {\n        var r = nbi();\n        this.bitwiseTo(a, op_and, r);\n        return r;\n    };\n    // BigInteger.prototype.or = bnOr;\n    BigInteger.prototype.or = function (a) {\n        var r = nbi();\n        this.bitwiseTo(a, op_or, r);\n        return r;\n    };\n    // BigInteger.prototype.xor = bnXor;\n    BigInteger.prototype.xor = function (a) {\n        var r = nbi();\n        this.bitwiseTo(a, op_xor, r);\n        return r;\n    };\n    // BigInteger.prototype.andNot = bnAndNot;\n    BigInteger.prototype.andNot = function (a) {\n        var r = nbi();\n        this.bitwiseTo(a, op_andnot, r);\n        return r;\n    };\n    // BigInteger.prototype.not = bnNot;\n    // (public) ~this\n    BigInteger.prototype.not = function () {\n        var r = nbi();\n        for (var i = 0; i < this.t; ++i) {\n            r[i] = this.DM & ~this[i];\n        }\n        r.t = this.t;\n        r.s = ~this.s;\n        return r;\n    };\n    // BigInteger.prototype.shiftLeft = bnShiftLeft;\n    // (public) this << n\n    BigInteger.prototype.shiftLeft = function (n) {\n        var r = nbi();\n        if (n < 0) {\n            this.rShiftTo(-n, r);\n        }\n        else {\n            this.lShiftTo(n, r);\n        }\n        return r;\n    };\n    // BigInteger.prototype.shiftRight = bnShiftRight;\n    // (public) this >> n\n    BigInteger.prototype.shiftRight = function (n) {\n        var r = nbi();\n        if (n < 0) {\n            this.lShiftTo(-n, r);\n        }\n        else {\n            this.rShiftTo(n, r);\n        }\n        return r;\n    };\n    // BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\n    // (public) returns index of lowest 1-bit (or -1 if none)\n    BigInteger.prototype.getLowestSetBit = function () {\n        for (var i = 0; i < this.t; ++i) {\n            if (this[i] != 0) {\n                return i * this.DB + lbit(this[i]);\n            }\n        }\n        if (this.s < 0) {\n            return this.t * this.DB;\n        }\n        return -1;\n    };\n    // BigInteger.prototype.bitCount = bnBitCount;\n    // (public) return number of set bits\n    BigInteger.prototype.bitCount = function () {\n        var r = 0;\n        var x = this.s & this.DM;\n        for (var i = 0; i < this.t; ++i) {\n            r += cbit(this[i] ^ x);\n        }\n        return r;\n    };\n    // BigInteger.prototype.testBit = bnTestBit;\n    // (public) true iff nth bit is set\n    BigInteger.prototype.testBit = function (n) {\n        var j = Math.floor(n / this.DB);\n        if (j >= this.t) {\n            return (this.s != 0);\n        }\n        return ((this[j] & (1 << (n % this.DB))) != 0);\n    };\n    // BigInteger.prototype.setBit = bnSetBit;\n    // (public) this | (1<<n)\n    BigInteger.prototype.setBit = function (n) {\n        return this.changeBit(n, op_or);\n    };\n    // BigInteger.prototype.clearBit = bnClearBit;\n    // (public) this & ~(1<<n)\n    BigInteger.prototype.clearBit = function (n) {\n        return this.changeBit(n, op_andnot);\n    };\n    // BigInteger.prototype.flipBit = bnFlipBit;\n    // (public) this ^ (1<<n)\n    BigInteger.prototype.flipBit = function (n) {\n        return this.changeBit(n, op_xor);\n    };\n    // BigInteger.prototype.add = bnAdd;\n    // (public) this + a\n    BigInteger.prototype.add = function (a) {\n        var r = nbi();\n        this.addTo(a, r);\n        return r;\n    };\n    // BigInteger.prototype.subtract = bnSubtract;\n    // (public) this - a\n    BigInteger.prototype.subtract = function (a) {\n        var r = nbi();\n        this.subTo(a, r);\n        return r;\n    };\n    // BigInteger.prototype.multiply = bnMultiply;\n    // (public) this * a\n    BigInteger.prototype.multiply = function (a) {\n        var r = nbi();\n        this.multiplyTo(a, r);\n        return r;\n    };\n    // BigInteger.prototype.divide = bnDivide;\n    // (public) this / a\n    BigInteger.prototype.divide = function (a) {\n        var r = nbi();\n        this.divRemTo(a, r, null);\n        return r;\n    };\n    // BigInteger.prototype.remainder = bnRemainder;\n    // (public) this % a\n    BigInteger.prototype.remainder = function (a) {\n        var r = nbi();\n        this.divRemTo(a, null, r);\n        return r;\n    };\n    // BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\n    // (public) [this/a,this%a]\n    BigInteger.prototype.divideAndRemainder = function (a) {\n        var q = nbi();\n        var r = nbi();\n        this.divRemTo(a, q, r);\n        return [q, r];\n    };\n    // BigInteger.prototype.modPow = bnModPow;\n    // (public) this^e % m (HAC 14.85)\n    BigInteger.prototype.modPow = function (e, m) {\n        var i = e.bitLength();\n        var k;\n        var r = nbv(1);\n        var z;\n        if (i <= 0) {\n            return r;\n        }\n        else if (i < 18) {\n            k = 1;\n        }\n        else if (i < 48) {\n            k = 3;\n        }\n        else if (i < 144) {\n            k = 4;\n        }\n        else if (i < 768) {\n            k = 5;\n        }\n        else {\n            k = 6;\n        }\n        if (i < 8) {\n            z = new Classic(m);\n        }\n        else if (m.isEven()) {\n            z = new Barrett(m);\n        }\n        else {\n            z = new Montgomery(m);\n        }\n        // precomputation\n        var g = [];\n        var n = 3;\n        var k1 = k - 1;\n        var km = (1 << k) - 1;\n        g[1] = z.convert(this);\n        if (k > 1) {\n            var g2 = nbi();\n            z.sqrTo(g[1], g2);\n            while (n <= km) {\n                g[n] = nbi();\n                z.mulTo(g2, g[n - 2], g[n]);\n                n += 2;\n            }\n        }\n        var j = e.t - 1;\n        var w;\n        var is1 = true;\n        var r2 = nbi();\n        var t;\n        i = nbits(e[j]) - 1;\n        while (j >= 0) {\n            if (i >= k1) {\n                w = (e[j] >> (i - k1)) & km;\n            }\n            else {\n                w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);\n                if (j > 0) {\n                    w |= e[j - 1] >> (this.DB + i - k1);\n                }\n            }\n            n = k;\n            while ((w & 1) == 0) {\n                w >>= 1;\n                --n;\n            }\n            if ((i -= n) < 0) {\n                i += this.DB;\n                --j;\n            }\n            if (is1) { // ret == 1, don't bother squaring or multiplying it\n                g[w].copyTo(r);\n                is1 = false;\n            }\n            else {\n                while (n > 1) {\n                    z.sqrTo(r, r2);\n                    z.sqrTo(r2, r);\n                    n -= 2;\n                }\n                if (n > 0) {\n                    z.sqrTo(r, r2);\n                }\n                else {\n                    t = r;\n                    r = r2;\n                    r2 = t;\n                }\n                z.mulTo(r2, g[w], r);\n            }\n            while (j >= 0 && (e[j] & (1 << i)) == 0) {\n                z.sqrTo(r, r2);\n                t = r;\n                r = r2;\n                r2 = t;\n                if (--i < 0) {\n                    i = this.DB - 1;\n                    --j;\n                }\n            }\n        }\n        return z.revert(r);\n    };\n    // BigInteger.prototype.modInverse = bnModInverse;\n    // (public) 1/this % m (HAC 14.61)\n    BigInteger.prototype.modInverse = function (m) {\n        var ac = m.isEven();\n        if ((this.isEven() && ac) || m.signum() == 0) {\n            return BigInteger.ZERO;\n        }\n        var u = m.clone();\n        var v = this.clone();\n        var a = nbv(1);\n        var b = nbv(0);\n        var c = nbv(0);\n        var d = nbv(1);\n        while (u.signum() != 0) {\n            while (u.isEven()) {\n                u.rShiftTo(1, u);\n                if (ac) {\n                    if (!a.isEven() || !b.isEven()) {\n                        a.addTo(this, a);\n                        b.subTo(m, b);\n                    }\n                    a.rShiftTo(1, a);\n                }\n                else if (!b.isEven()) {\n                    b.subTo(m, b);\n                }\n                b.rShiftTo(1, b);\n            }\n            while (v.isEven()) {\n                v.rShiftTo(1, v);\n                if (ac) {\n                    if (!c.isEven() || !d.isEven()) {\n                        c.addTo(this, c);\n                        d.subTo(m, d);\n                    }\n                    c.rShiftTo(1, c);\n                }\n                else if (!d.isEven()) {\n                    d.subTo(m, d);\n                }\n                d.rShiftTo(1, d);\n            }\n            if (u.compareTo(v) >= 0) {\n                u.subTo(v, u);\n                if (ac) {\n                    a.subTo(c, a);\n                }\n                b.subTo(d, b);\n            }\n            else {\n                v.subTo(u, v);\n                if (ac) {\n                    c.subTo(a, c);\n                }\n                d.subTo(b, d);\n            }\n        }\n        if (v.compareTo(BigInteger.ONE) != 0) {\n            return BigInteger.ZERO;\n        }\n        if (d.compareTo(m) >= 0) {\n            return d.subtract(m);\n        }\n        if (d.signum() < 0) {\n            d.addTo(m, d);\n        }\n        else {\n            return d;\n        }\n        if (d.signum() < 0) {\n            return d.add(m);\n        }\n        else {\n            return d;\n        }\n    };\n    // BigInteger.prototype.pow = bnPow;\n    // (public) this^e\n    BigInteger.prototype.pow = function (e) {\n        return this.exp(e, new NullExp());\n    };\n    // BigInteger.prototype.gcd = bnGCD;\n    // (public) gcd(this,a) (HAC 14.54)\n    BigInteger.prototype.gcd = function (a) {\n        var x = (this.s < 0) ? this.negate() : this.clone();\n        var y = (a.s < 0) ? a.negate() : a.clone();\n        if (x.compareTo(y) < 0) {\n            var t = x;\n            x = y;\n            y = t;\n        }\n        var i = x.getLowestSetBit();\n        var g = y.getLowestSetBit();\n        if (g < 0) {\n            return x;\n        }\n        if (i < g) {\n            g = i;\n        }\n        if (g > 0) {\n            x.rShiftTo(g, x);\n            y.rShiftTo(g, y);\n        }\n        while (x.signum() > 0) {\n            if ((i = x.getLowestSetBit()) > 0) {\n                x.rShiftTo(i, x);\n            }\n            if ((i = y.getLowestSetBit()) > 0) {\n                y.rShiftTo(i, y);\n            }\n            if (x.compareTo(y) >= 0) {\n                x.subTo(y, x);\n                x.rShiftTo(1, x);\n            }\n            else {\n                y.subTo(x, y);\n                y.rShiftTo(1, y);\n            }\n        }\n        if (g > 0) {\n            y.lShiftTo(g, y);\n        }\n        return y;\n    };\n    // BigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n    // (public) test primality with certainty >= 1-.5^t\n    BigInteger.prototype.isProbablePrime = function (t) {\n        var i;\n        var x = this.abs();\n        if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {\n            for (i = 0; i < lowprimes.length; ++i) {\n                if (x[0] == lowprimes[i]) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        if (x.isEven()) {\n            return false;\n        }\n        i = 1;\n        while (i < lowprimes.length) {\n            var m = lowprimes[i];\n            var j = i + 1;\n            while (j < lowprimes.length && m < lplim) {\n                m *= lowprimes[j++];\n            }\n            m = x.modInt(m);\n            while (i < j) {\n                if (m % lowprimes[i++] == 0) {\n                    return false;\n                }\n            }\n        }\n        return x.millerRabin(t);\n    };\n    //#endregion PUBLIC\n    //#region PROTECTED\n    // BigInteger.prototype.copyTo = bnpCopyTo;\n    // (protected) copy this to r\n    BigInteger.prototype.copyTo = function (r) {\n        for (var i = this.t - 1; i >= 0; --i) {\n            r[i] = this[i];\n        }\n        r.t = this.t;\n        r.s = this.s;\n    };\n    // BigInteger.prototype.fromInt = bnpFromInt;\n    // (protected) set from integer value x, -DV <= x < DV\n    BigInteger.prototype.fromInt = function (x) {\n        this.t = 1;\n        this.s = (x < 0) ? -1 : 0;\n        if (x > 0) {\n            this[0] = x;\n        }\n        else if (x < -1) {\n            this[0] = x + this.DV;\n        }\n        else {\n            this.t = 0;\n        }\n    };\n    // BigInteger.prototype.fromString = bnpFromString;\n    // (protected) set from string and radix\n    BigInteger.prototype.fromString = function (s, b) {\n        var k;\n        if (b == 16) {\n            k = 4;\n        }\n        else if (b == 8) {\n            k = 3;\n        }\n        else if (b == 256) {\n            k = 8;\n            /* byte array */\n        }\n        else if (b == 2) {\n            k = 1;\n        }\n        else if (b == 32) {\n            k = 5;\n        }\n        else if (b == 4) {\n            k = 2;\n        }\n        else {\n            this.fromRadix(s, b);\n            return;\n        }\n        this.t = 0;\n        this.s = 0;\n        var i = s.length;\n        var mi = false;\n        var sh = 0;\n        while (--i >= 0) {\n            var x = (k == 8) ? (+s[i]) & 0xff : intAt(s, i);\n            if (x < 0) {\n                if (s.charAt(i) == \"-\") {\n                    mi = true;\n                }\n                continue;\n            }\n            mi = false;\n            if (sh == 0) {\n                this[this.t++] = x;\n            }\n            else if (sh + k > this.DB) {\n                this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;\n                this[this.t++] = (x >> (this.DB - sh));\n            }\n            else {\n                this[this.t - 1] |= x << sh;\n            }\n            sh += k;\n            if (sh >= this.DB) {\n                sh -= this.DB;\n            }\n        }\n        if (k == 8 && ((+s[0]) & 0x80) != 0) {\n            this.s = -1;\n            if (sh > 0) {\n                this[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh;\n            }\n        }\n        this.clamp();\n        if (mi) {\n            BigInteger.ZERO.subTo(this, this);\n        }\n    };\n    // BigInteger.prototype.clamp = bnpClamp;\n    // (protected) clamp off excess high words\n    BigInteger.prototype.clamp = function () {\n        var c = this.s & this.DM;\n        while (this.t > 0 && this[this.t - 1] == c) {\n            --this.t;\n        }\n    };\n    // BigInteger.prototype.dlShiftTo = bnpDLShiftTo;\n    // (protected) r = this << n*DB\n    BigInteger.prototype.dlShiftTo = function (n, r) {\n        var i;\n        for (i = this.t - 1; i >= 0; --i) {\n            r[i + n] = this[i];\n        }\n        for (i = n - 1; i >= 0; --i) {\n            r[i] = 0;\n        }\n        r.t = this.t + n;\n        r.s = this.s;\n    };\n    // BigInteger.prototype.drShiftTo = bnpDRShiftTo;\n    // (protected) r = this >> n*DB\n    BigInteger.prototype.drShiftTo = function (n, r) {\n        for (var i = n; i < this.t; ++i) {\n            r[i - n] = this[i];\n        }\n        r.t = Math.max(this.t - n, 0);\n        r.s = this.s;\n    };\n    // BigInteger.prototype.lShiftTo = bnpLShiftTo;\n    // (protected) r = this << n\n    BigInteger.prototype.lShiftTo = function (n, r) {\n        var bs = n % this.DB;\n        var cbs = this.DB - bs;\n        var bm = (1 << cbs) - 1;\n        var ds = Math.floor(n / this.DB);\n        var c = (this.s << bs) & this.DM;\n        for (var i = this.t - 1; i >= 0; --i) {\n            r[i + ds + 1] = (this[i] >> cbs) | c;\n            c = (this[i] & bm) << bs;\n        }\n        for (var i = ds - 1; i >= 0; --i) {\n            r[i] = 0;\n        }\n        r[ds] = c;\n        r.t = this.t + ds + 1;\n        r.s = this.s;\n        r.clamp();\n    };\n    // BigInteger.prototype.rShiftTo = bnpRShiftTo;\n    // (protected) r = this >> n\n    BigInteger.prototype.rShiftTo = function (n, r) {\n        r.s = this.s;\n        var ds = Math.floor(n / this.DB);\n        if (ds >= this.t) {\n            r.t = 0;\n            return;\n        }\n        var bs = n % this.DB;\n        var cbs = this.DB - bs;\n        var bm = (1 << bs) - 1;\n        r[0] = this[ds] >> bs;\n        for (var i = ds + 1; i < this.t; ++i) {\n            r[i - ds - 1] |= (this[i] & bm) << cbs;\n            r[i - ds] = this[i] >> bs;\n        }\n        if (bs > 0) {\n            r[this.t - ds - 1] |= (this.s & bm) << cbs;\n        }\n        r.t = this.t - ds;\n        r.clamp();\n    };\n    // BigInteger.prototype.subTo = bnpSubTo;\n    // (protected) r = this - a\n    BigInteger.prototype.subTo = function (a, r) {\n        var i = 0;\n        var c = 0;\n        var m = Math.min(a.t, this.t);\n        while (i < m) {\n            c += this[i] - a[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        if (a.t < this.t) {\n            c -= a.s;\n            while (i < this.t) {\n                c += this[i];\n                r[i++] = c & this.DM;\n                c >>= this.DB;\n            }\n            c += this.s;\n        }\n        else {\n            c += this.s;\n            while (i < a.t) {\n                c -= a[i];\n                r[i++] = c & this.DM;\n                c >>= this.DB;\n            }\n            c -= a.s;\n        }\n        r.s = (c < 0) ? -1 : 0;\n        if (c < -1) {\n            r[i++] = this.DV + c;\n        }\n        else if (c > 0) {\n            r[i++] = c;\n        }\n        r.t = i;\n        r.clamp();\n    };\n    // BigInteger.prototype.multiplyTo = bnpMultiplyTo;\n    // (protected) r = this * a, r != this,a (HAC 14.12)\n    // \"this\" should be the larger one if appropriate.\n    BigInteger.prototype.multiplyTo = function (a, r) {\n        var x = this.abs();\n        var y = a.abs();\n        var i = x.t;\n        r.t = i + y.t;\n        while (--i >= 0) {\n            r[i] = 0;\n        }\n        for (i = 0; i < y.t; ++i) {\n            r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n        }\n        r.s = 0;\n        r.clamp();\n        if (this.s != a.s) {\n            BigInteger.ZERO.subTo(r, r);\n        }\n    };\n    // BigInteger.prototype.squareTo = bnpSquareTo;\n    // (protected) r = this^2, r != this (HAC 14.16)\n    BigInteger.prototype.squareTo = function (r) {\n        var x = this.abs();\n        var i = r.t = 2 * x.t;\n        while (--i >= 0) {\n            r[i] = 0;\n        }\n        for (i = 0; i < x.t - 1; ++i) {\n            var c = x.am(i, x[i], r, 2 * i, 0, 1);\n            if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\n                r[i + x.t] -= x.DV;\n                r[i + x.t + 1] = 1;\n            }\n        }\n        if (r.t > 0) {\n            r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n        }\n        r.s = 0;\n        r.clamp();\n    };\n    // BigInteger.prototype.divRemTo = bnpDivRemTo;\n    // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n    // r != q, this != m.  q or r may be null.\n    BigInteger.prototype.divRemTo = function (m, q, r) {\n        var pm = m.abs();\n        if (pm.t <= 0) {\n            return;\n        }\n        var pt = this.abs();\n        if (pt.t < pm.t) {\n            if (q != null) {\n                q.fromInt(0);\n            }\n            if (r != null) {\n                this.copyTo(r);\n            }\n            return;\n        }\n        if (r == null) {\n            r = nbi();\n        }\n        var y = nbi();\n        var ts = this.s;\n        var ms = m.s;\n        var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus\n        if (nsh > 0) {\n            pm.lShiftTo(nsh, y);\n            pt.lShiftTo(nsh, r);\n        }\n        else {\n            pm.copyTo(y);\n            pt.copyTo(r);\n        }\n        var ys = y.t;\n        var y0 = y[ys - 1];\n        if (y0 == 0) {\n            return;\n        }\n        var yt = y0 * (1 << this.F1) + ((ys > 1) ? y[ys - 2] >> this.F2 : 0);\n        var d1 = this.FV / yt;\n        var d2 = (1 << this.F1) / yt;\n        var e = 1 << this.F2;\n        var i = r.t;\n        var j = i - ys;\n        var t = (q == null) ? nbi() : q;\n        y.dlShiftTo(j, t);\n        if (r.compareTo(t) >= 0) {\n            r[r.t++] = 1;\n            r.subTo(t, r);\n        }\n        BigInteger.ONE.dlShiftTo(ys, t);\n        t.subTo(y, y); // \"negative\" y so we can replace sub with am later\n        while (y.t < ys) {\n            y[y.t++] = 0;\n        }\n        while (--j >= 0) {\n            // Estimate quotient digit\n            var qd = (r[--i] == y0) ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n            if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) { // Try it out\n                y.dlShiftTo(j, t);\n                r.subTo(t, r);\n                while (r[i] < --qd) {\n                    r.subTo(t, r);\n                }\n            }\n        }\n        if (q != null) {\n            r.drShiftTo(ys, q);\n            if (ts != ms) {\n                BigInteger.ZERO.subTo(q, q);\n            }\n        }\n        r.t = ys;\n        r.clamp();\n        if (nsh > 0) {\n            r.rShiftTo(nsh, r);\n        } // Denormalize remainder\n        if (ts < 0) {\n            BigInteger.ZERO.subTo(r, r);\n        }\n    };\n    // BigInteger.prototype.invDigit = bnpInvDigit;\n    // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n    // justification:\n    //         xy == 1 (mod m)\n    //         xy =  1+km\n    //   xy(2-xy) = (1+km)(1-km)\n    // x[y(2-xy)] = 1-k^2m^2\n    // x[y(2-xy)] == 1 (mod m^2)\n    // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n    // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n    // JS multiply \"overflows\" differently from C/C++, so care is needed here.\n    BigInteger.prototype.invDigit = function () {\n        if (this.t < 1) {\n            return 0;\n        }\n        var x = this[0];\n        if ((x & 1) == 0) {\n            return 0;\n        }\n        var y = x & 3; // y == 1/x mod 2^2\n        y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4\n        y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8\n        y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16\n        // last step - calculate inverse mod DV directly;\n        // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n        y = (y * (2 - x * y % this.DV)) % this.DV; // y == 1/x mod 2^dbits\n        // we really want the negative inverse, and -DV < y < DV\n        return (y > 0) ? this.DV - y : -y;\n    };\n    // BigInteger.prototype.isEven = bnpIsEven;\n    // (protected) true iff this is even\n    BigInteger.prototype.isEven = function () {\n        return ((this.t > 0) ? (this[0] & 1) : this.s) == 0;\n    };\n    // BigInteger.prototype.exp = bnpExp;\n    // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\n    BigInteger.prototype.exp = function (e, z) {\n        if (e > 0xffffffff || e < 1) {\n            return BigInteger.ONE;\n        }\n        var r = nbi();\n        var r2 = nbi();\n        var g = z.convert(this);\n        var i = nbits(e) - 1;\n        g.copyTo(r);\n        while (--i >= 0) {\n            z.sqrTo(r, r2);\n            if ((e & (1 << i)) > 0) {\n                z.mulTo(r2, g, r);\n            }\n            else {\n                var t = r;\n                r = r2;\n                r2 = t;\n            }\n        }\n        return z.revert(r);\n    };\n    // BigInteger.prototype.chunkSize = bnpChunkSize;\n    // (protected) return x s.t. r^x < DV\n    BigInteger.prototype.chunkSize = function (r) {\n        return Math.floor(Math.LN2 * this.DB / Math.log(r));\n    };\n    // BigInteger.prototype.toRadix = bnpToRadix;\n    // (protected) convert to radix string\n    BigInteger.prototype.toRadix = function (b) {\n        if (b == null) {\n            b = 10;\n        }\n        if (this.signum() == 0 || b < 2 || b > 36) {\n            return \"0\";\n        }\n        var cs = this.chunkSize(b);\n        var a = Math.pow(b, cs);\n        var d = nbv(a);\n        var y = nbi();\n        var z = nbi();\n        var r = \"\";\n        this.divRemTo(d, y, z);\n        while (y.signum() > 0) {\n            r = (a + z.intValue()).toString(b).substr(1) + r;\n            y.divRemTo(d, y, z);\n        }\n        return z.intValue().toString(b) + r;\n    };\n    // BigInteger.prototype.fromRadix = bnpFromRadix;\n    // (protected) convert from radix string\n    BigInteger.prototype.fromRadix = function (s, b) {\n        this.fromInt(0);\n        if (b == null) {\n            b = 10;\n        }\n        var cs = this.chunkSize(b);\n        var d = Math.pow(b, cs);\n        var mi = false;\n        var j = 0;\n        var w = 0;\n        for (var i = 0; i < s.length; ++i) {\n            var x = intAt(s, i);\n            if (x < 0) {\n                if (s.charAt(i) == \"-\" && this.signum() == 0) {\n                    mi = true;\n                }\n                continue;\n            }\n            w = b * w + x;\n            if (++j >= cs) {\n                this.dMultiply(d);\n                this.dAddOffset(w, 0);\n                j = 0;\n                w = 0;\n            }\n        }\n        if (j > 0) {\n            this.dMultiply(Math.pow(b, j));\n            this.dAddOffset(w, 0);\n        }\n        if (mi) {\n            BigInteger.ZERO.subTo(this, this);\n        }\n    };\n    // BigInteger.prototype.fromNumber = bnpFromNumber;\n    // (protected) alternate constructor\n    BigInteger.prototype.fromNumber = function (a, b, c) {\n        if (\"number\" == typeof b) {\n            // new BigInteger(int,int,RNG)\n            if (a < 2) {\n                this.fromInt(1);\n            }\n            else {\n                this.fromNumber(a, c);\n                if (!this.testBit(a - 1)) {\n                    // force MSB set\n                    this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n                }\n                if (this.isEven()) {\n                    this.dAddOffset(1, 0);\n                } // force odd\n                while (!this.isProbablePrime(b)) {\n                    this.dAddOffset(2, 0);\n                    if (this.bitLength() > a) {\n                        this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);\n                    }\n                }\n            }\n        }\n        else {\n            // new BigInteger(int,RNG)\n            var x = [];\n            var t = a & 7;\n            x.length = (a >> 3) + 1;\n            b.nextBytes(x);\n            if (t > 0) {\n                x[0] &= ((1 << t) - 1);\n            }\n            else {\n                x[0] = 0;\n            }\n            this.fromString(x, 256);\n        }\n    };\n    // BigInteger.prototype.bitwiseTo = bnpBitwiseTo;\n    // (protected) r = this op a (bitwise)\n    BigInteger.prototype.bitwiseTo = function (a, op, r) {\n        var i;\n        var f;\n        var m = Math.min(a.t, this.t);\n        for (i = 0; i < m; ++i) {\n            r[i] = op(this[i], a[i]);\n        }\n        if (a.t < this.t) {\n            f = a.s & this.DM;\n            for (i = m; i < this.t; ++i) {\n                r[i] = op(this[i], f);\n            }\n            r.t = this.t;\n        }\n        else {\n            f = this.s & this.DM;\n            for (i = m; i < a.t; ++i) {\n                r[i] = op(f, a[i]);\n            }\n            r.t = a.t;\n        }\n        r.s = op(this.s, a.s);\n        r.clamp();\n    };\n    // BigInteger.prototype.changeBit = bnpChangeBit;\n    // (protected) this op (1<<n)\n    BigInteger.prototype.changeBit = function (n, op) {\n        var r = BigInteger.ONE.shiftLeft(n);\n        this.bitwiseTo(r, op, r);\n        return r;\n    };\n    // BigInteger.prototype.addTo = bnpAddTo;\n    // (protected) r = this + a\n    BigInteger.prototype.addTo = function (a, r) {\n        var i = 0;\n        var c = 0;\n        var m = Math.min(a.t, this.t);\n        while (i < m) {\n            c += this[i] + a[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        if (a.t < this.t) {\n            c += a.s;\n            while (i < this.t) {\n                c += this[i];\n                r[i++] = c & this.DM;\n                c >>= this.DB;\n            }\n            c += this.s;\n        }\n        else {\n            c += this.s;\n            while (i < a.t) {\n                c += a[i];\n                r[i++] = c & this.DM;\n                c >>= this.DB;\n            }\n            c += a.s;\n        }\n        r.s = (c < 0) ? -1 : 0;\n        if (c > 0) {\n            r[i++] = c;\n        }\n        else if (c < -1) {\n            r[i++] = this.DV + c;\n        }\n        r.t = i;\n        r.clamp();\n    };\n    // BigInteger.prototype.dMultiply = bnpDMultiply;\n    // (protected) this *= n, this >= 0, 1 < n < DV\n    BigInteger.prototype.dMultiply = function (n) {\n        this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\n        ++this.t;\n        this.clamp();\n    };\n    // BigInteger.prototype.dAddOffset = bnpDAddOffset;\n    // (protected) this += n << w words, this >= 0\n    BigInteger.prototype.dAddOffset = function (n, w) {\n        if (n == 0) {\n            return;\n        }\n        while (this.t <= w) {\n            this[this.t++] = 0;\n        }\n        this[w] += n;\n        while (this[w] >= this.DV) {\n            this[w] -= this.DV;\n            if (++w >= this.t) {\n                this[this.t++] = 0;\n            }\n            ++this[w];\n        }\n    };\n    // BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\n    // (protected) r = lower n words of \"this * a\", a.t <= n\n    // \"this\" should be the larger one if appropriate.\n    BigInteger.prototype.multiplyLowerTo = function (a, n, r) {\n        var i = Math.min(this.t + a.t, n);\n        r.s = 0; // assumes a,this >= 0\n        r.t = i;\n        while (i > 0) {\n            r[--i] = 0;\n        }\n        for (var j = r.t - this.t; i < j; ++i) {\n            r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);\n        }\n        for (var j = Math.min(a.t, n); i < j; ++i) {\n            this.am(0, a[i], r, i, 0, n - i);\n        }\n        r.clamp();\n    };\n    // BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\n    // (protected) r = \"this * a\" without lower n words, n > 0\n    // \"this\" should be the larger one if appropriate.\n    BigInteger.prototype.multiplyUpperTo = function (a, n, r) {\n        --n;\n        var i = r.t = this.t + a.t - n;\n        r.s = 0; // assumes a,this >= 0\n        while (--i >= 0) {\n            r[i] = 0;\n        }\n        for (i = Math.max(n - this.t, 0); i < a.t; ++i) {\n            r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);\n        }\n        r.clamp();\n        r.drShiftTo(1, r);\n    };\n    // BigInteger.prototype.modInt = bnpModInt;\n    // (protected) this % n, n < 2^26\n    BigInteger.prototype.modInt = function (n) {\n        if (n <= 0) {\n            return 0;\n        }\n        var d = this.DV % n;\n        var r = (this.s < 0) ? n - 1 : 0;\n        if (this.t > 0) {\n            if (d == 0) {\n                r = this[0] % n;\n            }\n            else {\n                for (var i = this.t - 1; i >= 0; --i) {\n                    r = (d * r + this[i]) % n;\n                }\n            }\n        }\n        return r;\n    };\n    // BigInteger.prototype.millerRabin = bnpMillerRabin;\n    // (protected) true if probably prime (HAC 4.24, Miller-Rabin)\n    BigInteger.prototype.millerRabin = function (t) {\n        var n1 = this.subtract(BigInteger.ONE);\n        var k = n1.getLowestSetBit();\n        if (k <= 0) {\n            return false;\n        }\n        var r = n1.shiftRight(k);\n        t = (t + 1) >> 1;\n        if (t > lowprimes.length) {\n            t = lowprimes.length;\n        }\n        var a = nbi();\n        for (var i = 0; i < t; ++i) {\n            // Pick bases at random, instead of starting at 2\n            a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);\n            var y = a.modPow(r, this);\n            if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n                var j = 1;\n                while (j++ < k && y.compareTo(n1) != 0) {\n                    y = y.modPowInt(2, this);\n                    if (y.compareTo(BigInteger.ONE) == 0) {\n                        return false;\n                    }\n                }\n                if (y.compareTo(n1) != 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    // BigInteger.prototype.square = bnSquare;\n    // (public) this^2\n    BigInteger.prototype.square = function () {\n        var r = nbi();\n        this.squareTo(r);\n        return r;\n    };\n    //#region ASYNC\n    // Public API method\n    BigInteger.prototype.gcda = function (a, callback) {\n        var x = (this.s < 0) ? this.negate() : this.clone();\n        var y = (a.s < 0) ? a.negate() : a.clone();\n        if (x.compareTo(y) < 0) {\n            var t = x;\n            x = y;\n            y = t;\n        }\n        var i = x.getLowestSetBit();\n        var g = y.getLowestSetBit();\n        if (g < 0) {\n            callback(x);\n            return;\n        }\n        if (i < g) {\n            g = i;\n        }\n        if (g > 0) {\n            x.rShiftTo(g, x);\n            y.rShiftTo(g, y);\n        }\n        // Workhorse of the algorithm, gets called 200 - 800 times per 512 bit keygen.\n        var gcda1 = function () {\n            if ((i = x.getLowestSetBit()) > 0) {\n                x.rShiftTo(i, x);\n            }\n            if ((i = y.getLowestSetBit()) > 0) {\n                y.rShiftTo(i, y);\n            }\n            if (x.compareTo(y) >= 0) {\n                x.subTo(y, x);\n                x.rShiftTo(1, x);\n            }\n            else {\n                y.subTo(x, y);\n                y.rShiftTo(1, y);\n            }\n            if (!(x.signum() > 0)) {\n                if (g > 0) {\n                    y.lShiftTo(g, y);\n                }\n                setTimeout(function () { callback(y); }, 0); // escape\n            }\n            else {\n                setTimeout(gcda1, 0);\n            }\n        };\n        setTimeout(gcda1, 10);\n    };\n    // (protected) alternate constructor\n    BigInteger.prototype.fromNumberAsync = function (a, b, c, callback) {\n        if (\"number\" == typeof b) {\n            if (a < 2) {\n                this.fromInt(1);\n            }\n            else {\n                this.fromNumber(a, c);\n                if (!this.testBit(a - 1)) {\n                    this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n                }\n                if (this.isEven()) {\n                    this.dAddOffset(1, 0);\n                }\n                var bnp_1 = this;\n                var bnpfn1_1 = function () {\n                    bnp_1.dAddOffset(2, 0);\n                    if (bnp_1.bitLength() > a) {\n                        bnp_1.subTo(BigInteger.ONE.shiftLeft(a - 1), bnp_1);\n                    }\n                    if (bnp_1.isProbablePrime(b)) {\n                        setTimeout(function () { callback(); }, 0); // escape\n                    }\n                    else {\n                        setTimeout(bnpfn1_1, 0);\n                    }\n                };\n                setTimeout(bnpfn1_1, 0);\n            }\n        }\n        else {\n            var x = [];\n            var t = a & 7;\n            x.length = (a >> 3) + 1;\n            b.nextBytes(x);\n            if (t > 0) {\n                x[0] &= ((1 << t) - 1);\n            }\n            else {\n                x[0] = 0;\n            }\n            this.fromString(x, 256);\n        }\n    };\n    return BigInteger;\n}());\nexport { BigInteger };\n//#region REDUCERS\n//#region NullExp\nvar NullExp = /** @class */ (function () {\n    function NullExp() {\n    }\n    // NullExp.prototype.convert = nNop;\n    NullExp.prototype.convert = function (x) {\n        return x;\n    };\n    // NullExp.prototype.revert = nNop;\n    NullExp.prototype.revert = function (x) {\n        return x;\n    };\n    // NullExp.prototype.mulTo = nMulTo;\n    NullExp.prototype.mulTo = function (x, y, r) {\n        x.multiplyTo(y, r);\n    };\n    // NullExp.prototype.sqrTo = nSqrTo;\n    NullExp.prototype.sqrTo = function (x, r) {\n        x.squareTo(r);\n    };\n    return NullExp;\n}());\n// Modular reduction using \"classic\" algorithm\nvar Classic = /** @class */ (function () {\n    function Classic(m) {\n        this.m = m;\n    }\n    // Classic.prototype.convert = cConvert;\n    Classic.prototype.convert = function (x) {\n        if (x.s < 0 || x.compareTo(this.m) >= 0) {\n            return x.mod(this.m);\n        }\n        else {\n            return x;\n        }\n    };\n    // Classic.prototype.revert = cRevert;\n    Classic.prototype.revert = function (x) {\n        return x;\n    };\n    // Classic.prototype.reduce = cReduce;\n    Classic.prototype.reduce = function (x) {\n        x.divRemTo(this.m, null, x);\n    };\n    // Classic.prototype.mulTo = cMulTo;\n    Classic.prototype.mulTo = function (x, y, r) {\n        x.multiplyTo(y, r);\n        this.reduce(r);\n    };\n    // Classic.prototype.sqrTo = cSqrTo;\n    Classic.prototype.sqrTo = function (x, r) {\n        x.squareTo(r);\n        this.reduce(r);\n    };\n    return Classic;\n}());\n//#endregion\n//#region Montgomery\n// Montgomery reduction\nvar Montgomery = /** @class */ (function () {\n    function Montgomery(m) {\n        this.m = m;\n        this.mp = m.invDigit();\n        this.mpl = this.mp & 0x7fff;\n        this.mph = this.mp >> 15;\n        this.um = (1 << (m.DB - 15)) - 1;\n        this.mt2 = 2 * m.t;\n    }\n    // Montgomery.prototype.convert = montConvert;\n    // xR mod m\n    Montgomery.prototype.convert = function (x) {\n        var r = nbi();\n        x.abs().dlShiftTo(this.m.t, r);\n        r.divRemTo(this.m, null, r);\n        if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) {\n            this.m.subTo(r, r);\n        }\n        return r;\n    };\n    // Montgomery.prototype.revert = montRevert;\n    // x/R mod m\n    Montgomery.prototype.revert = function (x) {\n        var r = nbi();\n        x.copyTo(r);\n        this.reduce(r);\n        return r;\n    };\n    // Montgomery.prototype.reduce = montReduce;\n    // x = x/R mod m (HAC 14.32)\n    Montgomery.prototype.reduce = function (x) {\n        while (x.t <= this.mt2) {\n            // pad x so am has enough room later\n            x[x.t++] = 0;\n        }\n        for (var i = 0; i < this.m.t; ++i) {\n            // faster way of calculating u0 = x[i]*mp mod DV\n            var j = x[i] & 0x7fff;\n            var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM;\n            // use am to combine the multiply-shift-add into one call\n            j = i + this.m.t;\n            x[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n            // propagate carry\n            while (x[j] >= x.DV) {\n                x[j] -= x.DV;\n                x[++j]++;\n            }\n        }\n        x.clamp();\n        x.drShiftTo(this.m.t, x);\n        if (x.compareTo(this.m) >= 0) {\n            x.subTo(this.m, x);\n        }\n    };\n    // Montgomery.prototype.mulTo = montMulTo;\n    // r = \"xy/R mod m\"; x,y != r\n    Montgomery.prototype.mulTo = function (x, y, r) {\n        x.multiplyTo(y, r);\n        this.reduce(r);\n    };\n    // Montgomery.prototype.sqrTo = montSqrTo;\n    // r = \"x^2/R mod m\"; x != r\n    Montgomery.prototype.sqrTo = function (x, r) {\n        x.squareTo(r);\n        this.reduce(r);\n    };\n    return Montgomery;\n}());\n//#endregion Montgomery\n//#region Barrett\n// Barrett modular reduction\nvar Barrett = /** @class */ (function () {\n    function Barrett(m) {\n        this.m = m;\n        // setup Barrett\n        this.r2 = nbi();\n        this.q3 = nbi();\n        BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\n        this.mu = this.r2.divide(m);\n    }\n    // Barrett.prototype.convert = barrettConvert;\n    Barrett.prototype.convert = function (x) {\n        if (x.s < 0 || x.t > 2 * this.m.t) {\n            return x.mod(this.m);\n        }\n        else if (x.compareTo(this.m) < 0) {\n            return x;\n        }\n        else {\n            var r = nbi();\n            x.copyTo(r);\n            this.reduce(r);\n            return r;\n        }\n    };\n    // Barrett.prototype.revert = barrettRevert;\n    Barrett.prototype.revert = function (x) {\n        return x;\n    };\n    // Barrett.prototype.reduce = barrettReduce;\n    // x = x mod m (HAC 14.42)\n    Barrett.prototype.reduce = function (x) {\n        x.drShiftTo(this.m.t - 1, this.r2);\n        if (x.t > this.m.t + 1) {\n            x.t = this.m.t + 1;\n            x.clamp();\n        }\n        this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\n        this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\n        while (x.compareTo(this.r2) < 0) {\n            x.dAddOffset(1, this.m.t + 1);\n        }\n        x.subTo(this.r2, x);\n        while (x.compareTo(this.m) >= 0) {\n            x.subTo(this.m, x);\n        }\n    };\n    // Barrett.prototype.mulTo = barrettMulTo;\n    // r = x*y mod m; x,y != r\n    Barrett.prototype.mulTo = function (x, y, r) {\n        x.multiplyTo(y, r);\n        this.reduce(r);\n    };\n    // Barrett.prototype.sqrTo = barrettSqrTo;\n    // r = x^2 mod m; x != r\n    Barrett.prototype.sqrTo = function (x, r) {\n        x.squareTo(r);\n        this.reduce(r);\n    };\n    return Barrett;\n}());\n//#endregion\n//#endregion REDUCERS\n// return new, unset BigInteger\nexport function nbi() { return new BigInteger(null); }\nexport function parseBigInt(str, r) {\n    return new BigInteger(str, r);\n}\n// am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\nvar inBrowser = typeof navigator !== \"undefined\";\nif (inBrowser && j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\n    // am2 avoids a big mult-and-extract completely.\n    // Max digit bits should be <= 30 because we do bitwise ops\n    // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\n    BigInteger.prototype.am = function am2(i, x, w, j, c, n) {\n        var xl = x & 0x7fff;\n        var xh = x >> 15;\n        while (--n >= 0) {\n            var l = this[i] & 0x7fff;\n            var h = this[i++] >> 15;\n            var m = xh * l + h * xl;\n            l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n            c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n            w[j++] = l & 0x3fffffff;\n        }\n        return c;\n    };\n    dbits = 30;\n}\nelse if (inBrowser && j_lm && (navigator.appName != \"Netscape\")) {\n    // am1: use a single mult and divide to get the high bits,\n    // max digit bits should be 26 because\n    // max internal value = 2*dvalue^2-2*dvalue (< 2^53)\n    BigInteger.prototype.am = function am1(i, x, w, j, c, n) {\n        while (--n >= 0) {\n            var v = x * this[i++] + w[j] + c;\n            c = Math.floor(v / 0x4000000);\n            w[j++] = v & 0x3ffffff;\n        }\n        return c;\n    };\n    dbits = 26;\n}\nelse { // Mozilla/Netscape seems to prefer am3\n    // Alternately, set max digit bits to 28 since some\n    // browsers slow down when dealing with 32-bit numbers.\n    BigInteger.prototype.am = function am3(i, x, w, j, c, n) {\n        var xl = x & 0x3fff;\n        var xh = x >> 14;\n        while (--n >= 0) {\n            var l = this[i] & 0x3fff;\n            var h = this[i++] >> 14;\n            var m = xh * l + h * xl;\n            l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n            c = (l >> 28) + (m >> 14) + xh * h;\n            w[j++] = l & 0xfffffff;\n        }\n        return c;\n    };\n    dbits = 28;\n}\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = ((1 << dbits) - 1);\nBigInteger.prototype.DV = (1 << dbits);\nvar BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2, BI_FP);\nBigInteger.prototype.F1 = BI_FP - dbits;\nBigInteger.prototype.F2 = 2 * dbits - BI_FP;\n// Digit conversions\nvar BI_RC = [];\nvar rr;\nvar vv;\nrr = \"0\".charCodeAt(0);\nfor (vv = 0; vv <= 9; ++vv) {\n    BI_RC[rr++] = vv;\n}\nrr = \"a\".charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv) {\n    BI_RC[rr++] = vv;\n}\nrr = \"A\".charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv) {\n    BI_RC[rr++] = vv;\n}\nexport function intAt(s, i) {\n    var c = BI_RC[s.charCodeAt(i)];\n    return (c == null) ? -1 : c;\n}\n// return bigint initialized to value\nexport function nbv(i) {\n    var r = nbi();\n    r.fromInt(i);\n    return r;\n}\n// returns bit length of the integer x\nexport function nbits(x) {\n    var r = 1;\n    var t;\n    if ((t = x >>> 16) != 0) {\n        x = t;\n        r += 16;\n    }\n    if ((t = x >> 8) != 0) {\n        x = t;\n        r += 8;\n    }\n    if ((t = x >> 4) != 0) {\n        x = t;\n        r += 4;\n    }\n    if ((t = x >> 2) != 0) {\n        x = t;\n        r += 2;\n    }\n    if ((t = x >> 1) != 0) {\n        x = t;\n        r += 1;\n    }\n    return r;\n}\n// \"constants\"\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1);\n"],"names":["BigInteger","int2char","op_and","op_or","op_xor","op_andnot","lbit","cbit","NullExp","Classic","Montgomery","Barrett"],"mappings":"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"}