{"version":3,"file":"JSEncrypt.js","sources":["uni_modules/jsencrypt/lib/JSEncrypt.js"],"sourcesContent":["var _a;\nimport { b64tohex, hex2b64 } from \"./lib/jsbn/base64\";\nimport { JSEncryptRSAKey } from \"./JSEncryptRSAKey\";\nvar version = typeof process !== 'undefined'\n    ? (_a = process.env) === null || _a === void 0 ? void 0 : _a.npm_package_version\n    : undefined;\n/**\n *\n * @param {Object} [options = {}] - An object to customize JSEncrypt behaviour\n * possible parameters are:\n * - default_key_size        {number}  default: 1024 the key size in bit\n * - default_public_exponent {string}  default: '010001' the hexadecimal representation of the public exponent\n * - log                     {boolean} default: false whether log warn/error or not\n * @constructor\n */\nvar JSEncrypt = /** @class */ (function () {\n    function JSEncrypt(options) {\n        if (options === void 0) { options = {}; }\n        options = options || {};\n        this.default_key_size = options.default_key_size\n            ? parseInt(options.default_key_size, 10)\n            : 1024;\n        this.default_public_exponent = options.default_public_exponent || \"010001\"; // 65537 default openssl public exponent for rsa key type\n        this.log = options.log || false;\n        // The private and public key.\n        this.key = null;\n    }\n    /**\n     * Method to set the rsa key parameter (one method is enough to set both the public\n     * and the private key, since the private key contains the public key paramenters)\n     * Log a warning if logs are enabled\n     * @param {Object|string} key the pem encoded string or an object (with or without header/footer)\n     * @public\n     */\n    JSEncrypt.prototype.setKey = function (key) {\n        if (this.log && this.key) {\n            console.warn(\"A key was already set, overriding existing.\");\n        }\n        this.key = new JSEncryptRSAKey(key);\n    };\n    /**\n     * Proxy method for setKey, for api compatibility\n     * @see setKey\n     * @public\n     */\n    JSEncrypt.prototype.setPrivateKey = function (privkey) {\n        // Create the key.\n        this.setKey(privkey);\n    };\n    /**\n     * Proxy method for setKey, for api compatibility\n     * @see setKey\n     * @public\n     */\n    JSEncrypt.prototype.setPublicKey = function (pubkey) {\n        // Sets the public key.\n        this.setKey(pubkey);\n    };\n    /**\n     * Proxy method for RSAKey object's decrypt, decrypt the string using the private\n     * components of the rsa key object. Note that if the object was not set will be created\n     * on the fly (by the getKey method) using the parameters passed in the JSEncrypt constructor\n     * @param {string} str base64 encoded crypted string to decrypt\n     * @return {string} the decrypted string\n     * @public\n     */\n    JSEncrypt.prototype.decrypt = function (str) {\n        // Return the decrypted string.\n        try {\n            return this.getKey().decrypt(b64tohex(str));\n        }\n        catch (ex) {\n            return false;\n        }\n    };\n    /**\n     * Proxy method for RSAKey object's encrypt, encrypt the string using the public\n     * components of the rsa key object. Note that if the object was not set will be created\n     * on the fly (by the getKey method) using the parameters passed in the JSEncrypt constructor\n     * @param {string} str the string to encrypt\n     * @return {string} the encrypted string encoded in base64\n     * @public\n     */\n    JSEncrypt.prototype.encrypt = function (str) {\n        // Return the encrypted string.\n        try {\n            return hex2b64(this.getKey().encrypt(str));\n        }\n        catch (ex) {\n            return false;\n        }\n    };\n    /**\n     * Proxy method for RSAKey object's sign.\n     * @param {string} str the string to sign\n     * @param {function} digestMethod hash method\n     * @param {string} digestName the name of the hash algorithm\n     * @return {string} the signature encoded in base64\n     * @public\n     */\n    JSEncrypt.prototype.sign = function (str, digestMethod, digestName) {\n        // return the RSA signature of 'str' in 'hex' format.\n        try {\n            return hex2b64(this.getKey().sign(str, digestMethod, digestName));\n        }\n        catch (ex) {\n            return false;\n        }\n    };\n    /**\n     * Proxy method for RSAKey object's verify.\n     * @param {string} str the string to verify\n     * @param {string} signature the signature encoded in base64 to compare the string to\n     * @param {function} digestMethod hash method\n     * @return {boolean} whether the data and signature match\n     * @public\n     */\n    JSEncrypt.prototype.verify = function (str, signature, digestMethod) {\n        // Return the decrypted 'digest' of the signature.\n        try {\n            return this.getKey().verify(str, b64tohex(signature), digestMethod);\n        }\n        catch (ex) {\n            return false;\n        }\n    };\n    /**\n     * Getter for the current JSEncryptRSAKey object. If it doesn't exists a new object\n     * will be created and returned\n     * @param {callback} [cb] the callback to be called if we want the key to be generated\n     * in an async fashion\n     * @returns {JSEncryptRSAKey} the JSEncryptRSAKey object\n     * @public\n     */\n    JSEncrypt.prototype.getKey = function (cb) {\n        // Only create new if it does not exist.\n        if (!this.key) {\n            // Get a new private key.\n            this.key = new JSEncryptRSAKey();\n            if (cb && {}.toString.call(cb) === \"[object Function]\") {\n                this.key.generateAsync(this.default_key_size, this.default_public_exponent, cb);\n                return;\n            }\n            // Generate the key.\n            this.key.generate(this.default_key_size, this.default_public_exponent);\n        }\n        return this.key;\n    };\n    /**\n     * Returns the pem encoded representation of the private key\n     * If the key doesn't exists a new key will be created\n     * @returns {string} pem encoded representation of the private key WITH header and footer\n     * @public\n     */\n    JSEncrypt.prototype.getPrivateKey = function () {\n        // Return the private representation of this key.\n        return this.getKey().getPrivateKey();\n    };\n    /**\n     * Returns the pem encoded representation of the private key\n     * If the key doesn't exists a new key will be created\n     * @returns {string} pem encoded representation of the private key WITHOUT header and footer\n     * @public\n     */\n    JSEncrypt.prototype.getPrivateKeyB64 = function () {\n        // Return the private representation of this key.\n        return this.getKey().getPrivateBaseKeyB64();\n    };\n    /**\n     * Returns the pem encoded representation of the public key\n     * If the key doesn't exists a new key will be created\n     * @returns {string} pem encoded representation of the public key WITH header and footer\n     * @public\n     */\n    JSEncrypt.prototype.getPublicKey = function () {\n        // Return the private representation of this key.\n        return this.getKey().getPublicKey();\n    };\n    /**\n     * Returns the pem encoded representation of the public key\n     * If the key doesn't exists a new key will be created\n     * @returns {string} pem encoded representation of the public key WITHOUT header and footer\n     * @public\n     */\n    JSEncrypt.prototype.getPublicKeyB64 = function () {\n        // Return the private representation of this key.\n        return this.getKey().getPublicBaseKeyB64();\n    };\n    JSEncrypt.version = version;\n    return JSEncrypt;\n}());\nexport { JSEncrypt };\n"],"names":["JSEncrypt","uni","JSEncryptRSAKey","b64tohex","hex2b64"],"mappings":";;;;AAAA,IAAI;AAGJ,IAAI,UAAU,OAAO,YAAY,eAC1B,KAAK,QAAQ,SAAS,QAAQ,OAAO,SAAS,SAAS,GAAG,sBAC3D;AAUH,IAAC;AAAA;AAAA,EAA2B,WAAY;AACvC,aAASA,WAAU,SAAS;AACxB,UAAI,YAAY,QAAQ;AAAE,kBAAU,CAAE;AAAA,MAAG;AACzC,gBAAU,WAAW;AACrB,WAAK,mBAAmB,QAAQ,mBAC1B,SAAS,QAAQ,kBAAkB,EAAE,IACrC;AACN,WAAK,0BAA0B,QAAQ,2BAA2B;AAClE,WAAK,MAAM,QAAQ,OAAO;AAE1B,WAAK,MAAM;AAAA,IACd;AAQD,IAAAA,WAAU,UAAU,SAAS,SAAU,KAAK;AACxC,UAAI,KAAK,OAAO,KAAK,KAAK;AACtBC,sBAAAA,MAAa,MAAA,QAAA,gDAAA,6CAA6C;AAAA,MAC7D;AACD,WAAK,MAAM,IAAIC,0CAAe,gBAAC,GAAG;AAAA,IAC1C;AAMI,IAAAF,WAAU,UAAU,gBAAgB,SAAU,SAAS;AAEnD,WAAK,OAAO,OAAO;AAAA,IAC3B;AAMI,IAAAA,WAAU,UAAU,eAAe,SAAU,QAAQ;AAEjD,WAAK,OAAO,MAAM;AAAA,IAC1B;AASI,IAAAA,WAAU,UAAU,UAAU,SAAU,KAAK;AAEzC,UAAI;AACA,eAAO,KAAK,OAAQ,EAAC,QAAQG,0CAAQ,SAAC,GAAG,CAAC;AAAA,MAC7C,SACM,IAAI;AACP,eAAO;AAAA,MACV;AAAA,IACT;AASI,IAAAH,WAAU,UAAU,UAAU,SAAU,KAAK;AAEzC,UAAI;AACA,eAAOI,0CAAAA,QAAQ,KAAK,OAAQ,EAAC,QAAQ,GAAG,CAAC;AAAA,MAC5C,SACM,IAAI;AACP,eAAO;AAAA,MACV;AAAA,IACT;AASI,IAAAJ,WAAU,UAAU,OAAO,SAAU,KAAK,cAAc,YAAY;AAEhE,UAAI;AACA,eAAOI,0CAAO,QAAC,KAAK,OAAQ,EAAC,KAAK,KAAK,cAAc,UAAU,CAAC;AAAA,MACnE,SACM,IAAI;AACP,eAAO;AAAA,MACV;AAAA,IACT;AASI,IAAAJ,WAAU,UAAU,SAAS,SAAU,KAAK,WAAW,cAAc;AAEjE,UAAI;AACA,eAAO,KAAK,OAAM,EAAG,OAAO,KAAKG,mDAAS,SAAS,GAAG,YAAY;AAAA,MACrE,SACM,IAAI;AACP,eAAO;AAAA,MACV;AAAA,IACT;AASI,IAAAH,WAAU,UAAU,SAAS,SAAU,IAAI;AAEvC,UAAI,CAAC,KAAK,KAAK;AAEX,aAAK,MAAM,IAAIE,0CAAAA;AACf,YAAI,MAAM,CAAA,EAAG,SAAS,KAAK,EAAE,MAAM,qBAAqB;AACpD,eAAK,IAAI,cAAc,KAAK,kBAAkB,KAAK,yBAAyB,EAAE;AAC9E;AAAA,QACH;AAED,aAAK,IAAI,SAAS,KAAK,kBAAkB,KAAK,uBAAuB;AAAA,MACxE;AACD,aAAO,KAAK;AAAA,IACpB;AAOI,IAAAF,WAAU,UAAU,gBAAgB,WAAY;AAE5C,aAAO,KAAK,SAAS;IAC7B;AAOI,IAAAA,WAAU,UAAU,mBAAmB,WAAY;AAE/C,aAAO,KAAK,SAAS;IAC7B;AAOI,IAAAA,WAAU,UAAU,eAAe,WAAY;AAE3C,aAAO,KAAK,SAAS;IAC7B;AAOI,IAAAA,WAAU,UAAU,kBAAkB,WAAY;AAE9C,aAAO,KAAK,SAAS;IAC7B;AACI,IAAAA,WAAU,UAAU;AACpB,WAAOA;AAAA,EACX,EAAG;AAAA;;"}